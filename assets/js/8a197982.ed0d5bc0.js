"use strict";(globalThis.webpackChunkmochaapi_client_docs=globalThis.webpackChunkmochaapi_client_docs||[]).push([[862],{2873:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"advanced/interceptors","title":"Interceptors","description":"Learn how to use MochaJSON interceptors for authentication, logging, request/response transformation, and cross-cutting concerns. Complete guide with examples.","source":"@site/docs/advanced/interceptors.md","sourceDirName":"advanced","slug":"/advanced/interceptors","permalink":"/MochaJSON/advanced/interceptors","draft":false,"unlisted":false,"editUrl":"https://github.com/guptavishal-xm1/MochaJSON/tree/main/docs/docs/advanced/interceptors.md","tags":[],"version":"current","frontMatter":{"title":"Interceptors","description":"Learn how to use MochaJSON interceptors for authentication, logging, request/response transformation, and cross-cutting concerns. Complete guide with examples.","keywords":["MochaJSON interceptors","request interceptors","response interceptors","authentication interceptors","logging interceptors"]},"sidebar":"tutorialSidebar","previous":{"title":"Advanced Features","permalink":"/MochaJSON/advanced-features"},"next":{"title":"Production Checklist","permalink":"/MochaJSON/best-practices/production-checklist"}}');var s=r(4848),i=r(8453);const o={title:"Interceptors",description:"Learn how to use MochaJSON interceptors for authentication, logging, request/response transformation, and cross-cutting concerns. Complete guide with examples.",keywords:["MochaJSON interceptors","request interceptors","response interceptors","authentication interceptors","logging interceptors"]},c="Interceptors",l={},a=[{value:"What are Interceptors?",id:"what-are-interceptors",level:2},{value:"Request Interceptors",id:"request-interceptors",level:2},{value:"Basic Request Interceptor",id:"basic-request-interceptor",level:3},{value:"Authentication Interceptor",id:"authentication-interceptor",level:3},{value:"Built-in Authentication Interceptors",id:"built-in-authentication-interceptors",level:3},{value:"Request ID Interceptor",id:"request-id-interceptor",level:3},{value:"Logging Interceptor",id:"logging-interceptor",level:3},{value:"Multiple Request Interceptors",id:"multiple-request-interceptors",level:3},{value:"Response Interceptors",id:"response-interceptors",level:2},{value:"Basic Response Interceptor",id:"basic-response-interceptor",level:3},{value:"Error Handling Interceptor",id:"error-handling-interceptor",level:3},{value:"Built-in Error Interceptor",id:"built-in-error-interceptor",level:3},{value:"Response Logging Interceptor",id:"response-logging-interceptor",level:3},{value:"Metrics Collection Interceptor",id:"metrics-collection-interceptor",level:3},{value:"Response Transformation Interceptor",id:"response-transformation-interceptor",level:3},{value:"Advanced Interceptor Patterns",id:"advanced-interceptor-patterns",level:2},{value:"Conditional Interceptors",id:"conditional-interceptors",level:3},{value:"Token Refresh Interceptor",id:"token-refresh-interceptor",level:3},{value:"Circuit Breaker Interceptor",id:"circuit-breaker-interceptor",level:3},{value:"Retry Interceptor",id:"retry-interceptor",level:3},{value:"Real-World Examples",id:"real-world-examples",level:2},{value:"Complete API Client with Interceptors",id:"complete-api-client-with-interceptors",level:3},{value:"Spring Integration",id:"spring-integration",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Order Matters",id:"1-order-matters",level:3},{value:"2. Keep Interceptors Simple",id:"2-keep-interceptors-simple",level:3},{value:"3. Handle Exceptions in Interceptors",id:"3-handle-exceptions-in-interceptors",level:3},{value:"4. Use Built-in Interceptors When Possible",id:"4-use-built-in-interceptors-when-possible",level:3},{value:"Testing Interceptors",id:"testing-interceptors",level:2},{value:"Unit Testing Interceptors",id:"unit-testing-interceptors",level:3},{value:"Integration Testing",id:"integration-testing",level:3},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"interceptors",children:"Interceptors"})}),"\n",(0,s.jsx)(n.p,{children:"Interceptors are a powerful feature in MochaJSON that allow you to modify requests and responses, add logging, implement authentication, and handle cross-cutting concerns. They provide a clean way to implement functionality that applies to multiple API calls."}),"\n",(0,s.jsx)(n.h2,{id:"what-are-interceptors",children:"What are Interceptors?"}),"\n",(0,s.jsx)(n.p,{children:"Interceptors are functions that are called before sending requests (request interceptors) or after receiving responses (response interceptors). They allow you to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modify requests"})," before they're sent"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Transform responses"})," after they're received"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Add authentication"})," headers automatically"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Implement logging"})," for debugging and monitoring"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Handle errors"})," consistently across your application"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Add retry logic"})," for failed requests"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"request-interceptors",children:"Request Interceptors"}),"\n",(0,s.jsx)(n.p,{children:"Request interceptors are called before each request is sent, allowing you to modify the request."}),"\n",(0,s.jsx)(n.h3,{id:"basic-request-interceptor",children:"Basic Request Interceptor"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Create a request interceptor\nRequestInterceptor interceptor = request -> {\n    System.out.println("Sending request: " + request.getMethod() + " " + request.getUrl());\n    return request; // Return the modified request\n};\n\nApiClient client = new ApiClient.Builder()\n    .addRequestInterceptor(interceptor)\n    .build();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"authentication-interceptor",children:"Authentication Interceptor"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Add authentication to all requests\nRequestInterceptor authInterceptor = request -> {\n    String token = getAuthToken(); // Get token from secure storage\n    return request.header("Authorization", "Bearer " + token);\n};\n\nApiClient client = new ApiClient.Builder()\n    .addRequestInterceptor(authInterceptor)\n    .build();\n\n// All requests will now include the Authorization header\nUser user = client.get("/api/users/123").execute().to(User.class);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"built-in-authentication-interceptors",children:"Built-in Authentication Interceptors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Use built-in authentication interceptors\nApiClient client = new ApiClient.Builder()\n    .addRequestInterceptor(RequestInterceptor.bearerAuth(() -> getToken()))\n    .addRequestInterceptor(RequestInterceptor.basicAuth("username", "password"))\n    .addRequestInterceptor(RequestInterceptor.apiKey("X-API-Key", () -> getApiKey()))\n    .build();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"request-id-interceptor",children:"Request ID Interceptor"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Add unique request IDs for tracing\nRequestInterceptor requestIdInterceptor = request -> {\n    String requestId = UUID.randomUUID().toString();\n    return request.header("X-Request-ID", requestId);\n};\n\nApiClient client = new ApiClient.Builder()\n    .addRequestInterceptor(requestIdInterceptor)\n    .build();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"logging-interceptor",children:"Logging Interceptor"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Log all outgoing requests\nRequestInterceptor loggingInterceptor = request -> {\n    logger.info("Outgoing request: {} {} with headers: {}", \n        request.getMethod(), \n        request.getUrl(), \n        request.getHeaders());\n    return request;\n};\n\nApiClient client = new ApiClient.Builder()\n    .addRequestInterceptor(loggingInterceptor)\n    .build();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"multiple-request-interceptors",children:"Multiple Request Interceptors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Chain multiple request interceptors\nApiClient client = new ApiClient.Builder()\n    .addRequestInterceptor(RequestInterceptor.bearerAuth(() -> getToken()))\n    .addRequestInterceptor(request -> request.header("X-Client-Version", "1.2.0"))\n    .addRequestInterceptor(request -> {\n        logger.debug("Request: {} {}", request.getMethod(), request.getUrl());\n        return request;\n    })\n    .build();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"response-interceptors",children:"Response Interceptors"}),"\n",(0,s.jsx)(n.p,{children:"Response interceptors are called after each response is received, allowing you to modify the response or perform actions based on the response."}),"\n",(0,s.jsx)(n.h3,{id:"basic-response-interceptor",children:"Basic Response Interceptor"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Create a response interceptor\nResponseInterceptor interceptor = response -> {\n    System.out.println("Received response: " + response.code());\n    return response; // Return the modified response\n};\n\nApiClient client = new ApiClient.Builder()\n    .addResponseInterceptor(interceptor)\n    .build();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"error-handling-interceptor",children:"Error Handling Interceptor"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Handle errors consistently\nResponseInterceptor errorInterceptor = response -> {\n    if (response.isError()) {\n        logger.error("API error: {} - {}", response.code(), response.body());\n        \n        // Transform error responses into exceptions\n        if (response.code() == 401) {\n            throw new UnauthorizedException("Authentication required");\n        } else if (response.code() == 403) {\n            throw new ForbiddenException("Access denied");\n        } else if (response.code() >= 500) {\n            throw new ServerException("Server error: " + response.code());\n        }\n    }\n    return response;\n};\n\nApiClient client = new ApiClient.Builder()\n    .addResponseInterceptor(errorInterceptor)\n    .build();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"built-in-error-interceptor",children:"Built-in Error Interceptor"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// \u2705 Use built-in error handling\nApiClient client = new ApiClient.Builder()\n    .addResponseInterceptor(ResponseInterceptor.throwOnError())\n    .build();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"response-logging-interceptor",children:"Response Logging Interceptor"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Log all incoming responses\nResponseInterceptor loggingInterceptor = response -> {\n    logger.info("Incoming response: {} - {}ms", \n        response.code(), \n        response.getDuration().toMillis());\n    return response;\n};\n\nApiClient client = new ApiClient.Builder()\n    .addResponseInterceptor(loggingInterceptor)\n    .build();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"metrics-collection-interceptor",children:"Metrics Collection Interceptor"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Collect metrics for monitoring\npublic class MetricsInterceptor implements ResponseInterceptor {\n    \n    private final MeterRegistry meterRegistry;\n    \n    public MetricsInterceptor(MeterRegistry meterRegistry) {\n        this.meterRegistry = meterRegistry;\n    }\n    \n    @Override\n    public ApiResponse intercept(ApiResponse response) {\n        Timer.Sample sample = Timer.start(meterRegistry);\n        sample.stop(Timer.builder("api.requests")\n            .tag("status", String.valueOf(response.code()))\n            .tag("endpoint", extractEndpoint(response.getUrl()))\n            .register(meterRegistry));\n            \n        return response;\n    }\n}\n\n// Usage\nApiClient client = new ApiClient.Builder()\n    .addResponseInterceptor(new MetricsInterceptor(meterRegistry))\n    .build();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"response-transformation-interceptor",children:"Response Transformation Interceptor"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Transform response data\nResponseInterceptor transformInterceptor = response -> {\n    if (response.isSuccess()) {\n        // Add metadata to successful responses\n        String body = response.body();\n        if (body != null) {\n            // Parse and add timestamp\n            try {\n                ObjectMapper mapper = new ObjectMapper();\n                JsonNode json = mapper.readTree(body);\n                ((ObjectNode) json).put("timestamp", System.currentTimeMillis());\n                return response.withBody(mapper.writeValueAsString(json));\n            } catch (Exception e) {\n                logger.warn("Failed to transform response", e);\n            }\n        }\n    }\n    return response;\n};\n\nApiClient client = new ApiClient.Builder()\n    .addResponseInterceptor(transformInterceptor)\n    .build();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-interceptor-patterns",children:"Advanced Interceptor Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"conditional-interceptors",children:"Conditional Interceptors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Apply interceptors conditionally\nRequestInterceptor conditionalInterceptor = request -> {\n    if (request.getUrl().contains("/api/v2/")) {\n        return request.header("X-API-Version", "2.0");\n    }\n    return request;\n};\n\nApiClient client = new ApiClient.Builder()\n    .addRequestInterceptor(conditionalInterceptor)\n    .build();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"token-refresh-interceptor",children:"Token Refresh Interceptor"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Automatically refresh expired tokens\npublic class TokenRefreshInterceptor implements ResponseInterceptor {\n    \n    private final Supplier<String> tokenSupplier;\n    private final Supplier<String> refreshTokenSupplier;\n    \n    @Override\n    public ApiResponse intercept(ApiResponse response) {\n        if (response.code() == 401) {\n            // Token expired, try to refresh\n            try {\n                String newToken = refreshTokenSupplier.get();\n                if (newToken != null) {\n                    // Retry the original request with new token\n                    // This would require access to the original request\n                    logger.info("Token refreshed successfully");\n                }\n            } catch (Exception e) {\n                logger.error("Failed to refresh token", e);\n            }\n        }\n        return response;\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"circuit-breaker-interceptor",children:"Circuit Breaker Interceptor"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Implement circuit breaker pattern\npublic class CircuitBreakerInterceptor implements ResponseInterceptor {\n    \n    private final CircuitBreaker circuitBreaker;\n    \n    public CircuitBreakerInterceptor(CircuitBreaker circuitBreaker) {\n        this.circuitBreaker = circuitBreaker;\n    }\n    \n    @Override\n    public ApiResponse intercept(ApiResponse response) {\n        if (response.isError()) {\n            circuitBreaker.recordFailure();\n        } else {\n            circuitBreaker.recordSuccess();\n        }\n        \n        if (circuitBreaker.getState() == CircuitBreaker.State.OPEN) {\n            throw new CircuitBreakerOpenException("Circuit breaker is open");\n        }\n        \n        return response;\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"retry-interceptor",children:"Retry Interceptor"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Custom retry logic\npublic class RetryInterceptor implements ResponseInterceptor {\n    \n    private final int maxRetries;\n    private final Duration retryDelay;\n    \n    @Override\n    public ApiResponse intercept(ApiResponse response) {\n        if (shouldRetry(response) && retryCount < maxRetries) {\n            try {\n                Thread.sleep(retryDelay.toMillis());\n                // This would require access to the original request\n                // In practice, you\'d use the built-in retry mechanism\n                return retryRequest();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                throw new RuntimeException("Retry interrupted", e);\n            }\n        }\n        return response;\n    }\n    \n    private boolean shouldRetry(ApiResponse response) {\n        return response.code() >= 500 || response.code() == 429;\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"real-world-examples",children:"Real-World Examples"}),"\n",(0,s.jsx)(n.h3,{id:"complete-api-client-with-interceptors",children:"Complete API Client with Interceptors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public class UserApiClient {\n    \n    private final ApiClient client;\n    private final Logger logger = LoggerFactory.getLogger(UserApiClient.class);\n    \n    public UserApiClient(String baseUrl, Supplier<String> tokenSupplier) {\n        this.client = new ApiClient.Builder()\n            .baseUrl(baseUrl)\n            .addRequestInterceptor(RequestInterceptor.bearerAuth(tokenSupplier))\n            .addRequestInterceptor(request -> {\n                logger.debug("Request: {} {}", request.getMethod(), request.getUrl());\n                return request.header("X-Client-Version", "1.2.0");\n            })\n            .addResponseInterceptor(response -> {\n                logger.debug("Response: {} - {}ms", response.code(), response.getDuration().toMillis());\n                return response;\n            })\n            .addResponseInterceptor(ResponseInterceptor.throwOnError())\n            .enableLogging()\n            .build();\n    }\n    \n    public User getUser(String id) {\n        return client.get("/api/users/" + id)\n            .execute()\n            .to(User.class);\n    }\n    \n    public List<User> getUsers() {\n        return client.get("/api/users")\n            .execute()\n            .toList();\n    }\n    \n    public User createUser(User user) {\n        return client.post("/api/users")\n            .body(user)\n            .execute()\n            .to(User.class);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"spring-integration",children:"Spring Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Component\npublic class ApiClientConfig {\n    \n    @Value("${api.base-url}")\n    private String baseUrl;\n    \n    @Value("${api.token}")\n    private String apiToken;\n    \n    @Bean\n    public ApiClient apiClient() {\n        return new ApiClient.Builder()\n            .baseUrl(baseUrl)\n            .addRequestInterceptor(RequestInterceptor.bearerAuth(() -> apiToken))\n            .addRequestInterceptor(request -> request.header("X-Request-ID", UUID.randomUUID().toString()))\n            .addResponseInterceptor(new MetricsInterceptor(meterRegistry))\n            .addResponseInterceptor(ResponseInterceptor.throwOnError())\n            .enableConnectionPooling()\n            .enableRetryPolicy()\n            .enableCircuitBreaker()\n            .build();\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-order-matters",children:"1. Order Matters"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// \u2705 Interceptors are executed in the order they're added\nApiClient client = new ApiClient.Builder()\n    .addRequestInterceptor(authInterceptor)      // 1. Add auth\n    .addRequestInterceptor(loggingInterceptor)   // 2. Log request\n    .addResponseInterceptor(loggingInterceptor)  // 3. Log response\n    .addResponseInterceptor(errorInterceptor)    // 4. Handle errors\n    .build();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-keep-interceptors-simple",children:"2. Keep Interceptors Simple"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 GOOD: Simple, focused interceptor\nRequestInterceptor authInterceptor = request -> \n    request.header("Authorization", "Bearer " + getToken());\n\n// \u274c BAD: Complex interceptor doing too much\nRequestInterceptor complexInterceptor = request -> {\n    // Authentication\n    String token = getToken();\n    request = request.header("Authorization", "Bearer " + token);\n    \n    // Logging\n    logger.info("Request: {}", request.getUrl());\n    \n    // Metrics\n    recordMetric(request);\n    \n    // Transformation\n    // ... more complex logic\n    \n    return request;\n};\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-handle-exceptions-in-interceptors",children:"3. Handle Exceptions in Interceptors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Handle exceptions gracefully in interceptors\nRequestInterceptor safeInterceptor = request -> {\n    try {\n        String token = getToken();\n        return request.header("Authorization", "Bearer " + token);\n    } catch (Exception e) {\n        logger.error("Failed to add auth header", e);\n        return request; // Continue without auth header\n    }\n};\n'})}),"\n",(0,s.jsx)(n.h3,{id:"4-use-built-in-interceptors-when-possible",children:"4. Use Built-in Interceptors When Possible"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// \u2705 Use built-in interceptors for common patterns\nApiClient client = new ApiClient.Builder()\n    .addRequestInterceptor(RequestInterceptor.bearerAuth(() -> getToken()))\n    .addResponseInterceptor(ResponseInterceptor.throwOnError())\n    .build();\n\n// \u274c Don't reinvent the wheel\nRequestInterceptor customAuthInterceptor = request -> {\n    // Custom auth logic that duplicates built-in functionality\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"testing-interceptors",children:"Testing Interceptors"}),"\n",(0,s.jsx)(n.h3,{id:"unit-testing-interceptors",children:"Unit Testing Interceptors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testAuthInterceptor() {\n    // Arrange\n    RequestInterceptor interceptor = RequestInterceptor.bearerAuth(() -> "test-token");\n    ApiRequest request = Api.get("/test");\n    \n    // Act\n    ApiRequest modifiedRequest = interceptor.intercept(request);\n    \n    // Assert\n    assertThat(modifiedRequest.getHeaders())\n        .containsEntry("Authorization", "Bearer test-token");\n}\n\n@Test\npublic void testErrorInterceptor() {\n    // Arrange\n    ResponseInterceptor interceptor = ResponseInterceptor.throwOnError();\n    ApiResponse errorResponse = mockApiResponse(404);\n    \n    // Act & Assert\n    assertThatThrownBy(() -> interceptor.intercept(errorResponse))\n        .isInstanceOf(ApiException.class);\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testClientWithInterceptors() {\n    // Arrange\n    ApiClient client = new ApiClient.Builder()\n        .addRequestInterceptor(request -> request.header("X-Test", "true"))\n        .addResponseInterceptor(response -> {\n            assertThat(response.getHeaders()).containsKey("X-Test");\n            return response;\n        })\n        .build();\n    \n    // Act\n    ApiResponse response = client.get("https://httpbin.org/get").execute();\n    \n    // Assert\n    assertThat(response.isSuccess()).isTrue();\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/MochaJSON/advanced/interceptors",children:"Advanced Features"})})," - Learn about other advanced features"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/MochaJSON/best-practices/production-checklist",children:"Best Practices"})})," - Production deployment guide"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>c});var t=r(6540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);