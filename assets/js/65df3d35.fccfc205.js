"use strict";(globalThis.webpackChunkmochaapi_client_docs=globalThis.webpackChunkmochaapi_client_docs||[]).push([[559],{8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>o});var r=n(6540);const t={},i=r.createContext(t);function a(e){const s=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:s},e.children)}},8895:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"api/overview","title":"API Overview","description":"MochaAPI Client provides a simple, fluent interface for making HTTP requests and parsing JSON responses in Java and Kotlin.","source":"@site/docs/api/overview.md","sourceDirName":"api","slug":"/api/overview","permalink":"/MochaJSON/api/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/guptavishal-xm1/MochaJSON/tree/main/docs/docs/api/overview.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Performance Tips","permalink":"/MochaJSON/best-practices/performance-tips"},"next":{"title":"API Reference","permalink":"/MochaJSON/api/api-reference"}}');var t=n(4848),i=n(8453);const a={},o="API Overview",l={},d=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"1. Entry Point: <code>Api</code> Class",id:"1-entry-point-api-class",level:3},{value:"2. Request Building: <code>ApiRequest</code> Class",id:"2-request-building-apirequest-class",level:3},{value:"3. Response Handling: <code>ApiResponse</code> Class",id:"3-response-handling-apiresponse-class",level:3},{value:"HTTP Methods",id:"http-methods",level:2},{value:"Request Building Methods",id:"request-building-methods",level:2},{value:"Headers",id:"headers",level:3},{value:"Query Parameters",id:"query-parameters",level:3},{value:"Request Body",id:"request-body",level:3},{value:"Response Methods",id:"response-methods",level:2},{value:"Basic Response Information",id:"basic-response-information",level:3},{value:"JSON Parsing",id:"json-parsing",level:3},{value:"Status Checking",id:"status-checking",level:3},{value:"Async Execution",id:"async-execution",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Exception Types",id:"exception-types",level:3},{value:"Error Handling Example",id:"error-handling-example",level:3},{value:"JSON Mapping",id:"json-mapping",level:2},{value:"Supported Types",id:"supported-types",level:3},{value:"JSON Mappers",id:"json-mappers",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Default Settings",id:"default-settings",level:3},{value:"Custom Configuration",id:"custom-configuration",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Use POJOs for Type Safety",id:"1-use-pojos-for-type-safety",level:3},{value:"2. Handle Errors Gracefully",id:"2-handle-errors-gracefully",level:3},{value:"3. Use Appropriate HTTP Methods",id:"3-use-appropriate-http-methods",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"api-overview",children:"API Overview"})}),"\n",(0,t.jsx)(s.p,{children:"MochaAPI Client provides a simple, fluent interface for making HTTP requests and parsing JSON responses in Java and Kotlin."}),"\n",(0,t.jsx)(s.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,t.jsxs)(s.h3,{id:"1-entry-point-api-class",children:["1. Entry Point: ",(0,t.jsx)(s.code,{children:"Api"})," Class"]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"Api"})," class is the main entry point for all HTTP requests. It provides static methods for creating requests:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'// Create different types of requests\nApiRequest getRequest = Api.get("https://api.example.com/data");\nApiRequest postRequest = Api.post("https://api.example.com/users");\nApiRequest putRequest = Api.put("https://api.example.com/users/1");\nApiRequest deleteRequest = Api.delete("https://api.example.com/users/1");\nApiRequest patchRequest = Api.patch("https://api.example.com/users/1");\n'})}),"\n",(0,t.jsxs)(s.h3,{id:"2-request-building-apirequest-class",children:["2. Request Building: ",(0,t.jsx)(s.code,{children:"ApiRequest"})," Class"]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"ApiRequest"})," class provides a fluent interface for building HTTP requests:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'ApiRequest request = Api.get("https://api.example.com/data")\n    .header("Authorization", "Bearer token123")  // Add headers\n    .query("page", 1)                           // Add query parameters\n    .query("limit", 10)                         // Add more query parameters\n    .body(requestData);                         // Set request body\n'})}),"\n",(0,t.jsxs)(s.h3,{id:"3-response-handling-apiresponse-class",children:["3. Response Handling: ",(0,t.jsx)(s.code,{children:"ApiResponse"})," Class"]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"ApiResponse"})," class contains the HTTP response and provides methods for parsing JSON:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:"ApiResponse response = request.execute();\n\n// Basic response information\nint statusCode = response.code();                // HTTP status code\nString body = response.body();                  // Raw response body\nMap<String, String> headers = response.headers(); // Response headers\n\n// JSON parsing methods\nUser user = response.to(User.class);            // Parse to POJO\nMap<String, Object> map = response.toMap();     // Parse to Map\nList<Object> list = response.toList();          // Parse to List\n\n// Status checking\nboolean isSuccess = response.isSuccess();        // 200-299 status codes\nboolean isError = response.isError();            // 400+ status codes\n"})}),"\n",(0,t.jsx)(s.h2,{id:"http-methods",children:"HTTP Methods"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Method"}),(0,t.jsx)(s.th,{children:"Description"}),(0,t.jsx)(s.th,{children:"Usage"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"GET"})}),(0,t.jsx)(s.td,{children:"Retrieve data"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"Api.get(url)"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"POST"})}),(0,t.jsx)(s.td,{children:"Create new resource"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"Api.post(url)"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"PUT"})}),(0,t.jsx)(s.td,{children:"Update existing resource"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"Api.put(url)"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"DELETE"})}),(0,t.jsx)(s.td,{children:"Delete resource"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"Api.delete(url)"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"PATCH"})}),(0,t.jsx)(s.td,{children:"Partial update"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"Api.patch(url)"})})]})]})]}),"\n",(0,t.jsx)(s.h2,{id:"request-building-methods",children:"Request Building Methods"}),"\n",(0,t.jsx)(s.h3,{id:"headers",children:"Headers"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'ApiRequest request = Api.get("https://api.example.com/data")\n    .header("Authorization", "Bearer token123")\n    .header("Content-Type", "application/json")\n    .header("User-Agent", "MyApp/1.0");\n'})}),"\n",(0,t.jsx)(s.h3,{id:"query-parameters",children:"Query Parameters"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'ApiRequest request = Api.get("https://api.example.com/search")\n    .query("q", "java")\n    .query("page", 1)\n    .query("limit", 10)\n    .query("sort", "date");\n'})}),"\n",(0,t.jsx)(s.h3,{id:"request-body",children:"Request Body"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'// String body\nApiRequest request = Api.post("https://api.example.com/data")\n    .body("{\\"name\\":\\"John\\",\\"email\\":\\"john@example.com\\"}");\n\n// Map body (automatically serialized to JSON)\nMap<String, Object> data = Map.of("name", "John", "email", "john@example.com");\nApiRequest request = Api.post("https://api.example.com/data")\n    .body(data);\n\n// POJO body (automatically serialized to JSON)\nUser user = new User("John", "john@example.com");\nApiRequest request = Api.post("https://api.example.com/data")\n    .body(user);\n'})}),"\n",(0,t.jsx)(s.h2,{id:"response-methods",children:"Response Methods"}),"\n",(0,t.jsx)(s.h3,{id:"basic-response-information",children:"Basic Response Information"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:"ApiResponse response = request.execute();\n\n// HTTP status code\nint statusCode = response.code();\n\n// Raw response body as string\nString body = response.body();\n\n// Response headers\nMap<String, String> headers = response.headers();\n"})}),"\n",(0,t.jsx)(s.h3,{id:"json-parsing",children:"JSON Parsing"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'// Parse to Map<String, Object>\nMap<String, Object> data = response.toMap();\nString name = (String) data.get("name");\n\n// Parse to List<Object>\nList<Object> items = response.toList();\nfor (Object item : items) {\n    Map<String, Object> itemMap = (Map<String, Object>) item;\n    System.out.println(itemMap.get("title"));\n}\n\n// Parse to POJO\nUser user = response.to(User.class);\nSystem.out.println(user.getName());\n'})}),"\n",(0,t.jsx)(s.h3,{id:"status-checking",children:"Status Checking"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'ApiResponse response = request.execute();\n\n// General status checking\nif (response.isSuccess()) {\n    // Status code 200-299\n    System.out.println("Request successful");\n} else if (response.isError()) {\n    // Status code 400+\n    System.out.println("Request failed: " + response.code());\n}\n\n// Specific status code checking\nif (response.isOk()) {\n    System.out.println("OK (200)");\n} else if (response.isCreated()) {\n    System.out.println("Created (201)");\n} else if (response.isNotFound()) {\n    System.out.println("Not Found (404)");\n} else if (response.isUnauthorized()) {\n    System.out.println("Unauthorized (401)");\n} else if (response.isInternalServerError()) {\n    System.out.println("Server Error (500)");\n}\n\n// Category checking\nif (response.isClientError()) {\n    System.out.println("Client error (400-499)");\n} else if (response.isServerError()) {\n    System.out.println("Server error (500-599)");\n}\n\n// Get human-readable status description\nSystem.out.println("Status: " + response.code() + " - " + response.getStatusDescription());\n'})}),"\n",(0,t.jsx)(s.h2,{id:"async-execution",children:"Async Execution"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'// Execute asynchronously with callback\nApi.get("https://api.example.com/data")\n    .async(response -> {\n        System.out.println("Async response: " + response.body());\n        System.out.println("Status: " + response.code());\n    });\n\n// Main thread continues...\nSystem.out.println("Request sent asynchronously");\n'})}),"\n",(0,t.jsx)(s.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(s.h3,{id:"exception-types",children:"Exception Types"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Exception"}),(0,t.jsx)(s.th,{children:"When Thrown"}),(0,t.jsx)(s.th,{children:"Example"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"ApiException"})}),(0,t.jsx)(s.td,{children:"HTTP/network errors"}),(0,t.jsx)(s.td,{children:"Connection timeout, 500 error"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"JsonException"})}),(0,t.jsx)(s.td,{children:"JSON parsing errors"}),(0,t.jsx)(s.td,{children:"Malformed JSON, type mismatch"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"error-handling-example",children:"Error Handling Example"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'try {\n    ApiResponse response = Api.get("https://api.example.com/data")\n        .execute();\n    \n    if (response.isError()) {\n        System.err.println("HTTP Error: " + response.code());\n        return;\n    }\n    \n    User user = response.to(User.class);\n    System.out.println("Success: " + user.getName());\n    \n} catch (ApiException e) {\n    System.err.println("Network/HTTP Error: " + e.getMessage());\n} catch (JsonException e) {\n    System.err.println("JSON Parsing Error: " + e.getMessage());\n} catch (Exception e) {\n    System.err.println("Unexpected Error: " + e.getMessage());\n}\n'})}),"\n",(0,t.jsx)(s.h2,{id:"json-mapping",children:"JSON Mapping"}),"\n",(0,t.jsx)(s.h3,{id:"supported-types",children:"Supported Types"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"}),(0,t.jsx)(s.th,{children:"Example"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"Map<String, Object>"})}),(0,t.jsx)(s.td,{children:"Generic JSON object"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"response.toMap()"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"List<Object>"})}),(0,t.jsx)(s.td,{children:"JSON array"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"response.toList()"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"POJO"})}),(0,t.jsx)(s.td,{children:"Custom class"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"response.to(User.class)"})})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"String"})}),(0,t.jsx)(s.td,{children:"Raw JSON string"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"response.body()"})})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"json-mappers",children:"JSON Mappers"}),"\n",(0,t.jsx)(s.p,{children:"MochaAPI Client includes two JSON mappers:"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"JacksonJsonMapper"})," - Uses Jackson Databind (default for Java)"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"KotlinxJsonMapper"})," - Uses Kotlinx Serialization (for Kotlin)"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Both implement the ",(0,t.jsx)(s.code,{children:"JsonMapper"})," interface:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:"public interface JsonMapper {\n    String stringify(Object obj);\n    <T> T parse(String json, Class<T> type);\n    Map<String, Object> toMap(String json);\n    List<Object> toList(String json);\n}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsx)(s.h3,{id:"default-settings",children:"Default Settings"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Connection Timeout"}),": 30 seconds"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Read Timeout"}),": 30 seconds"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"User Agent"}),": ",(0,t.jsx)(s.code,{children:"MochaAPI-Client/1.0.1"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Default Headers"}),": ",(0,t.jsx)(s.code,{children:"Accept: application/json"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Content-Type"}),": ",(0,t.jsx)(s.code,{children:"application/json"})," (for POST/PUT/PATCH)"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"custom-configuration",children:"Custom Configuration"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:"// Custom HttpClient (requires modifying the library)\nHttpClient customClient = HttpClient.newBuilder()\n    .connectTimeout(Duration.ofSeconds(60))\n    .build();\n\n// Custom ObjectMapper (requires modifying the library)\nObjectMapper customMapper = new ObjectMapper();\ncustomMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n"})}),"\n",(0,t.jsx)(s.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(s.h3,{id:"1-use-pojos-for-type-safety",children:"1. Use POJOs for Type Safety"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'// \u2705 Good: Type-safe\nUser user = response.to(User.class);\nSystem.out.println(user.getName());\n\n// \u274c Avoid: Unsafe casting\nMap<String, Object> data = response.toMap();\nSystem.out.println((String) data.get("name"));\n'})}),"\n",(0,t.jsx)(s.h3,{id:"2-handle-errors-gracefully",children:"2. Handle Errors Gracefully"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:"// \u2705 Good: Comprehensive error handling\ntry {\n    ApiResponse response = Api.get(url).execute();\n    if (response.isError()) {\n        handleHttpError(response.code());\n        return;\n    }\n    processResponse(response);\n} catch (ApiException e) {\n    handleNetworkError(e);\n} catch (JsonException e) {\n    handleJsonError(e);\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"3-use-appropriate-http-methods",children:"3. Use Appropriate HTTP Methods"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:"// \u2705 Good: Correct HTTP methods\nApi.get(url)      // For retrieving data\nApi.post(url)     // For creating resources\nApi.put(url)      // For updating resources\nApi.delete(url)   // For deleting resources\n"})}),"\n",(0,t.jsx)(s.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.a,{href:"/MochaJSON/api/api-reference",children:"API Reference"})})," - Complete method documentation"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.a,{href:"/MochaJSON/api/exceptions",children:"Exceptions"})})," - Detailed error handling guide"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.a,{href:"/MochaJSON/usage/java-examples",children:"Java Examples"})})," - Complete Java usage examples"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.a,{href:"/MochaJSON/usage/kotlin-examples",children:"Kotlin Examples"})})," - Complete Kotlin usage examples"]}),"\n"]})]})}function p(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);