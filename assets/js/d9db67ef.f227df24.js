"use strict";(globalThis.webpackChunkmochaapi_client_docs=globalThis.webpackChunkmochaapi_client_docs||[]).push([[636],{4587:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"api/exceptions","title":"Exceptions","description":"Comprehensive guide to error handling and exception management in MochaAPI Client.","source":"@site/docs/api/exceptions.md","sourceDirName":"api","slug":"/api/exceptions","permalink":"/MochaJSON/api/exceptions","draft":false,"unlisted":false,"editUrl":"https://github.com/guptavishal-xm1/MochaJSON/tree/main/docs/docs/api/exceptions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"API Reference","permalink":"/MochaJSON/api/api-reference"},"next":{"title":"Migrating from OkHttp + Gson","permalink":"/MochaJSON/migration/from-okhttp"}}');var t=r(4848),i=r(8453);const a={},o="Exceptions",l={},c=[{value:"Exception Hierarchy",id:"exception-hierarchy",level:2},{value:"Exception Types",id:"exception-types",level:2},{value:"<code>ApiException</code>",id:"apiexception",level:3},{value:"When Thrown",id:"when-thrown",level:4},{value:"Constructor Signatures",id:"constructor-signatures",level:4},{value:"Example Usage",id:"example-usage",level:4},{value:"<code>JsonException</code>",id:"jsonexception",level:3},{value:"When Thrown",id:"when-thrown-1",level:4},{value:"Constructor Signatures",id:"constructor-signatures-1",level:4},{value:"Example Usage",id:"example-usage-1",level:4},{value:"Error Scenarios",id:"error-scenarios",level:2},{value:"Network Errors",id:"network-errors",level:3},{value:"HTTP Status Errors",id:"http-status-errors",level:3},{value:"JSON Parsing Errors",id:"json-parsing-errors",level:3},{value:"Type Conversion Errors",id:"type-conversion-errors",level:3},{value:"Comprehensive Error Handling",id:"comprehensive-error-handling",level:2},{value:"Complete Error Handling Pattern",id:"complete-error-handling-pattern",level:3},{value:"Kotlin Error Handling",id:"kotlin-error-handling",level:3},{value:"Error Recovery Strategies",id:"error-recovery-strategies",level:2},{value:"Retry Logic",id:"retry-logic",level:3},{value:"Fallback Data",id:"fallback-data",level:3},{value:"Graceful Degradation",id:"graceful-degradation",level:3},{value:"Error Logging",id:"error-logging",level:2},{value:"Structured Logging",id:"structured-logging",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Always Handle Exceptions",id:"1-always-handle-exceptions",level:3},{value:"2. Check HTTP Status",id:"2-check-http-status",level:3},{value:"3. Provide Meaningful Error Messages",id:"3-provide-meaningful-error-messages",level:3},{value:"4. Log Errors Appropriately",id:"4-log-errors-appropriately",level:3},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"exceptions",children:"Exceptions"})}),"\n",(0,t.jsx)(n.p,{children:"Comprehensive guide to error handling and exception management in MochaAPI Client."}),"\n",(0,t.jsx)(n.h2,{id:"exception-hierarchy",children:"Exception Hierarchy"}),"\n",(0,t.jsx)(n.p,{children:"MochaAPI Client provides a clear exception hierarchy for different types of errors:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"RuntimeException\n\u251c\u2500\u2500 ApiException          # HTTP/Network errors\n\u2514\u2500\u2500 JsonException         # JSON parsing errors\n"})}),"\n",(0,t.jsx)(n.h2,{id:"exception-types",children:"Exception Types"}),"\n",(0,t.jsx)(n.h3,{id:"apiexception",children:(0,t.jsx)(n.code,{children:"ApiException"})}),"\n",(0,t.jsx)(n.p,{children:"Thrown for HTTP-related errors, network issues, and request failures."}),"\n",(0,t.jsx)(n.h4,{id:"when-thrown",children:"When Thrown"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Network Errors"}),": Connection timeouts, DNS failures, connection refused"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"HTTP Errors"}),": Server errors (500, 503), client errors (400, 401, 403, 404)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Request Failures"}),": Malformed URLs, invalid request parameters"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Interruption"}),": Thread interruption during request execution"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"constructor-signatures",children:"Constructor Signatures"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public ApiException(String message)\npublic ApiException(String message, Throwable cause)\n"})}),"\n",(0,t.jsx)(n.h4,{id:"example-usage",children:"Example Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'try {\n    ApiResponse response = Api.get("https://api.example.com/data").execute();\n} catch (ApiException e) {\n    System.err.println("API Error: " + e.getMessage());\n    if (e.getCause() != null) {\n        System.err.println("Root Cause: " + e.getCause().getMessage());\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"jsonexception",children:(0,t.jsx)(n.code,{children:"JsonException"})}),"\n",(0,t.jsx)(n.p,{children:"Thrown for JSON serialization and deserialization errors."}),"\n",(0,t.jsx)(n.h4,{id:"when-thrown-1",children:"When Thrown"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Serialization Errors"}),": Object \u2192 JSON conversion failures"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Deserialization Errors"}),": JSON \u2192 Object conversion failures"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type Mismatches"}),": JSON structure doesn't match expected POJO"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Malformed JSON"}),": Invalid JSON syntax"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Missing Fields"}),": Required fields not present in JSON"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"constructor-signatures-1",children:"Constructor Signatures"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public JsonException(String message)\npublic JsonException(String message, Throwable cause)\n"})}),"\n",(0,t.jsx)(n.h4,{id:"example-usage-1",children:"Example Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'try {\n    User user = response.to(User.class);\n} catch (JsonException e) {\n    System.err.println("JSON Error: " + e.getMessage());\n    if (e.getCause() != null) {\n        System.err.println("Root Cause: " + e.getCause().getMessage());\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"error-scenarios",children:"Error Scenarios"}),"\n",(0,t.jsx)(n.h3,{id:"network-errors",children:"Network Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'try {\n    // This will fail if the server is unreachable\n    ApiResponse response = Api.get("https://unreachable-server.com/data").execute();\n} catch (ApiException e) {\n    // Handle network errors\n    System.err.println("Network Error: " + e.getMessage());\n    // Output: "Network Error: Connection refused"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"http-status-errors",children:"HTTP Status Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'try {\n    // This will succeed but return an error status\n    ApiResponse response = Api.get("https://api.example.com/nonexistent").execute();\n    \n    if (response.isError()) {\n        System.err.println("HTTP Error: " + response.code());\n        System.err.println("Error Body: " + response.body());\n    }\n} catch (ApiException e) {\n    // This catches network/connection errors\n    System.err.println("Request Failed: " + e.getMessage());\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"json-parsing-errors",children:"JSON Parsing Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'try {\n    // This will fail if JSON doesn\'t match User structure\n    User user = Api.get("https://api.example.com/invalid-json").execute()\n        .to(User.class);\n} catch (JsonException e) {\n    // Handle JSON parsing errors\n    System.err.println("JSON Parsing Error: " + e.getMessage());\n    // Output: "JSON Parsing Error: Failed to parse JSON to User: Unrecognized field \'unknownField\'"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"type-conversion-errors",children:"Type Conversion Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'try {\n    // This will fail if JSON contains wrong data types\n    Map<String, Object> data = Api.get("https://api.example.com/data").execute()\n        .toMap();\n    \n    // Safe type conversion\n    String name = (String) data.getOrDefault("name", "Unknown");\n    Integer age = (Integer) data.getOrDefault("age", 0);\n    \n} catch (JsonException e) {\n    System.err.println("Type Conversion Error: " + e.getMessage());\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"comprehensive-error-handling",children:"Comprehensive Error Handling"}),"\n",(0,t.jsx)(n.h3,{id:"complete-error-handling-pattern",children:"Complete Error Handling Pattern"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\nimport io.mochaapi.client.exception.*;\n\npublic class ErrorHandlingExample {\n    public static void main(String[] args) {\n        try {\n            ApiResponse response = Api.get("https://jsonplaceholder.typicode.com/users/1")\n                .execute();\n            \n            // Check HTTP status\n            if (response.isError()) {\n                handleHttpError(response);\n                return;\n            }\n            \n            // Parse JSON safely\n            User user = response.to(User.class);\n            System.out.println("Success: " + user.name);\n            \n        } catch (ApiException e) {\n            handleApiError(e);\n        } catch (JsonException e) {\n            handleJsonError(e);\n        } catch (Exception e) {\n            handleUnexpectedError(e);\n        }\n    }\n    \n    private static void handleHttpError(ApiResponse response) {\n        System.err.println("HTTP Error: " + response.code());\n        System.err.println("Error Response: " + response.body());\n        \n        switch (response.code()) {\n            case 400:\n                System.err.println("Bad Request - Check your request parameters");\n                break;\n            case 401:\n                System.err.println("Unauthorized - Check your authentication");\n                break;\n            case 403:\n                System.err.println("Forbidden - You don\'t have permission");\n                break;\n            case 404:\n                System.err.println("Not Found - Resource doesn\'t exist");\n                break;\n            case 500:\n                System.err.println("Server Error - Try again later");\n                break;\n            default:\n                System.err.println("Unknown HTTP error");\n        }\n    }\n    \n    private static void handleApiError(ApiException e) {\n        System.err.println("API Error: " + e.getMessage());\n        \n        if (e.getCause() != null) {\n            System.err.println("Root Cause: " + e.getCause().getMessage());\n            \n            // Handle specific network errors\n            if (e.getCause() instanceof java.net.ConnectException) {\n                System.err.println("Connection failed - Check your internet connection");\n            } else if (e.getCause() instanceof java.net.SocketTimeoutException) {\n                System.err.println("Request timeout - Server is slow or unreachable");\n            }\n        }\n    }\n    \n    private static void handleJsonError(JsonException e) {\n        System.err.println("JSON Error: " + e.getMessage());\n        \n        if (e.getCause() != null) {\n            System.err.println("Root Cause: " + e.getCause().getMessage());\n            \n            // Handle specific JSON errors\n            if (e.getCause() instanceof com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException) {\n                System.err.println("Unknown field in JSON - Check your POJO structure");\n            } else if (e.getCause() instanceof com.fasterxml.jackson.core.JsonParseException) {\n                System.err.println("Invalid JSON format - Check server response");\n            }\n        }\n    }\n    \n    private static void handleUnexpectedError(Exception e) {\n        System.err.println("Unexpected Error: " + e.getMessage());\n        e.printStackTrace();\n    }\n    \n    public static class User {\n        public int id;\n        public String name;\n        public String email;\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"kotlin-error-handling",children:"Kotlin Error Handling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\nimport io.mochaapi.client.exception.*\n\nfun main() {\n    try {\n        val response = Api.get("https://jsonplaceholder.typicode.com/users/1")\n            .execute()\n        \n        if (response.isError()) {\n            handleHttpError(response)\n            return\n        }\n        \n        val user = response.to(User::class.java)\n        println("Success: ${user.name}")\n        \n    } catch (e: ApiException) {\n        handleApiError(e)\n    } catch (e: JsonException) {\n        handleJsonError(e)\n    } catch (e: Exception) {\n        handleUnexpectedError(e)\n    }\n}\n\nprivate fun handleHttpError(response: ApiResponse) {\n    println("HTTP Error: ${response.code()}")\n    println("Error Response: ${response.body()}")\n}\n\nprivate fun handleApiError(e: ApiException) {\n    println("API Error: ${e.message}")\n    e.cause?.let { cause ->\n        println("Root Cause: ${cause.message}")\n    }\n}\n\nprivate fun handleJsonError(e: JsonException) {\n    println("JSON Error: ${e.message}")\n    e.cause?.let { cause ->\n        println("Root Cause: ${cause.message}")\n    }\n}\n\nprivate fun handleUnexpectedError(e: Exception) {\n    println("Unexpected Error: ${e.message}")\n    e.printStackTrace()\n}\n\ndata class User(\n    val id: Int,\n    val name: String,\n    val email: String\n)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"error-recovery-strategies",children:"Error Recovery Strategies"}),"\n",(0,t.jsx)(n.h3,{id:"retry-logic",children:"Retry Logic"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class RetryExample {\n    private static final int MAX_RETRIES = 3;\n    private static final long RETRY_DELAY_MS = 1000;\n    \n    public static ApiResponse executeWithRetry(String url) {\n        for (int attempt = 1; attempt <= MAX_RETRIES; attempt++) {\n            try {\n                ApiResponse response = Api.get(url).execute();\n                \n                if (response.isSuccess()) {\n                    return response;\n                } else if (response.code() >= 500) {\n                    // Server error - retry\n                    System.out.println("Server error, retrying... (attempt " + attempt + ")");\n                    if (attempt < MAX_RETRIES) {\n                        Thread.sleep(RETRY_DELAY_MS);\n                        continue;\n                    }\n                }\n                \n                return response; // Client error - don\'t retry\n                \n            } catch (ApiException e) {\n                System.out.println("Network error, retrying... (attempt " + attempt + ")");\n                if (attempt < MAX_RETRIES) {\n                    try {\n                        Thread.sleep(RETRY_DELAY_MS);\n                    } catch (InterruptedException ie) {\n                        Thread.currentThread().interrupt();\n                        throw new ApiException("Retry interrupted", ie);\n                    }\n                } else {\n                    throw e;\n                }\n            }\n        }\n        \n        throw new ApiException("Max retries exceeded");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"fallback-data",children:"Fallback Data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class FallbackExample {\n    public static User getUserWithFallback(int userId) {\n        try {\n            // Try to get user from API\n            return Api.get("https://api.example.com/users/" + userId)\n                .execute()\n                .to(User.class);\n                \n        } catch (ApiException e) {\n            System.err.println("API failed, using fallback data: " + e.getMessage());\n            \n            // Return fallback user\n            User fallbackUser = new User();\n            fallbackUser.id = userId;\n            fallbackUser.name = "Unknown User";\n            fallbackUser.email = "unknown@example.com";\n            return fallbackUser;\n            \n        } catch (JsonException e) {\n            System.err.println("JSON parsing failed: " + e.getMessage());\n            throw e; // Re-throw JSON errors as they\'re usually programming errors\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"graceful-degradation",children:"Graceful Degradation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class GracefulDegradationExample {\n    public static void processUserData(int userId) {\n        try {\n            ApiResponse response = Api.get("https://api.example.com/users/" + userId)\n                .execute();\n            \n            if (response.isError()) {\n                handleHttpError(response);\n                return;\n            }\n            \n            // Try to parse as User POJO first\n            try {\n                User user = response.to(User.class);\n                processUser(user);\n                \n            } catch (JsonException e) {\n                System.err.println("POJO parsing failed, falling back to Map: " + e.getMessage());\n                \n                // Fallback to Map parsing\n                Map<String, Object> userData = response.toMap();\n                processUserMap(userData);\n            }\n            \n        } catch (ApiException e) {\n            System.err.println("Request failed: " + e.getMessage());\n            // Continue with default behavior or show error message\n        }\n    }\n    \n    private static void processUser(User user) {\n        System.out.println("Processing user: " + user.name);\n    }\n    \n    private static void processUserMap(Map<String, Object> userData) {\n        String name = (String) userData.getOrDefault("name", "Unknown");\n        System.out.println("Processing user map: " + name);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"error-logging",children:"Error Logging"}),"\n",(0,t.jsx)(n.h3,{id:"structured-logging",children:"Structured Logging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.util.logging.Logger;\nimport java.util.logging.Level;\n\npublic class LoggingExample {\n    private static final Logger logger = Logger.getLogger(LoggingExample.class.getName());\n    \n    public static void makeApiCall(String url) {\n        try {\n            ApiResponse response = Api.get(url).execute();\n            \n            if (response.isError()) {\n                logger.log(Level.WARNING, "HTTP error: {0} - {1}", \n                    new Object[]{response.code(), response.body()});\n            } else {\n                logger.log(Level.INFO, "API call successful: {0}", url);\n            }\n            \n        } catch (ApiException e) {\n            logger.log(Level.SEVERE, "API error for URL {0}: {1}", \n                new Object[]{url, e.getMessage()});\n            \n        } catch (JsonException e) {\n            logger.log(Level.SEVERE, "JSON parsing error for URL {0}: {1}", \n                new Object[]{url, e.getMessage()});\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-always-handle-exceptions",children:"1. Always Handle Exceptions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// \u2705 Good: Comprehensive error handling\ntry {\n    User user = Api.get(url).execute().to(User.class);\n    processUser(user);\n} catch (ApiException e) {\n    handleNetworkError(e);\n} catch (JsonException e) {\n    handleJsonError(e);\n}\n\n// \u274c Avoid: Ignoring exceptions\nUser user = Api.get(url).execute().to(User.class); // Can throw exceptions\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-check-http-status",children:"2. Check HTTP Status"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// \u2705 Good: Check status before parsing\nApiResponse response = Api.get(url).execute();\nif (response.isSuccess()) {\n    User user = response.to(User.class);\n    processUser(user);\n} else {\n    handleHttpError(response);\n}\n\n// \u274c Avoid: Parsing without status check\nUser user = Api.get(url).execute().to(User.class); // Might parse error response\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-provide-meaningful-error-messages",children:"3. Provide Meaningful Error Messages"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// \u2705 Good: Descriptive error messages\ncatch (ApiException e) {\n    System.err.println("Failed to connect to API server: " + e.getMessage());\n    // Suggest solutions\n    System.err.println("Please check your internet connection and try again.");\n}\n\n// \u274c Avoid: Generic error messages\ncatch (ApiException e) {\n    System.err.println("Error: " + e.getMessage());\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"4-log-errors-appropriately",children:"4. Log Errors Appropriately"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// \u2705 Good: Appropriate log levels\nlogger.log(Level.SEVERE, "Critical API failure: " + e.getMessage());\nlogger.log(Level.WARNING, "API returned error status: " + response.code());\nlogger.log(Level.INFO, "API call completed successfully");\n\n// \u274c Avoid: Wrong log levels\nlogger.log(Level.SEVERE, "User not found"); // Should be WARNING or INFO\n'})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/MochaJSON/api/api-reference",children:"API Reference"})})," - Complete method documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/MochaJSON/usage/java-examples",children:"Java Examples"})})," - Complete Java usage examples"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/MochaJSON/usage/kotlin-examples",children:"Kotlin Examples"})})," - Complete Kotlin usage examples"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/MochaJSON/usage/json-handling",children:"JSON Handling"})})," - Advanced JSON parsing techniques"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var s=r(6540);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);