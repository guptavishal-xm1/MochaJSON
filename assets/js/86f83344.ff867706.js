"use strict";(globalThis.webpackChunkmochaapi_client_docs=globalThis.webpackChunkmochaapi_client_docs||[]).push([[505],{8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>d});var t=s(6540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}},9445:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"usage/kotlin-examples","title":"Kotlin Examples","description":"Complete Kotlin usage examples for MochaAPI Client, including GET requests, POST requests, JSON parsing, and error handling.","source":"@site/docs/usage/kotlin-examples.md","sourceDirName":"usage","slug":"/usage/kotlin-examples","permalink":"/MochaJSON/usage/kotlin-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/guptavishal-xm1/MochaJSON/tree/main/docs/docs/usage/kotlin-examples.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Java Examples","permalink":"/MochaJSON/usage/java-examples"},"next":{"title":"JSON Handling","permalink":"/MochaJSON/usage/json-handling"}}');var i=s(4848),r=s(8453);const l={},d="Kotlin Examples",c={},o=[{value:"GET Request with Map Parsing",id:"get-request-with-map-parsing",level:2},{value:"GET Request with Data Class",id:"get-request-with-data-class",level:2},{value:"POST Request with JSON Body",id:"post-request-with-json-body",level:2},{value:"Query Parameters and Headers",id:"query-parameters-and-headers",level:2},{value:"Async Requests",id:"async-requests",level:2},{value:"Complex Nested Objects",id:"complex-nested-objects",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"List Processing",id:"list-processing",level:2},{value:"Functional Style with Extension Functions",id:"functional-style-with-extension-functions",level:2},{value:"Next Steps",id:"next-steps",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"kotlin-examples",children:"Kotlin Examples"})}),"\n",(0,i.jsx)(n.p,{children:"Complete Kotlin usage examples for MochaAPI Client, including GET requests, POST requests, JSON parsing, and error handling."}),"\n",(0,i.jsx)(n.h2,{id:"get-request-with-map-parsing",children:"GET Request with Map Parsing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\n\nfun main() {\n    // GET request \u2192 Map\n    val post = Api.get("https://jsonplaceholder.typicode.com/posts/1")\n        .execute()\n        .toMap()\n    \n    println("Post ID: ${post["id"]}")\n    println("Post Title: ${post["title"]}")\n    println("Post Body: ${post["body"]}")\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Sample JSON Response:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Sample Value"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"userId"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Int"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"1"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"id"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Int"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"1"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"title"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"sunt aut facere repellat provident occaecati excepturi optio reprehenderit"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"body"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto"'})})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"get-request-with-data-class",children:"GET Request with Data Class"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\n\ndata class Post(\n    val id: Int,\n    val userId: Int,\n    val title: String,\n    val body: String\n)\n\nfun main() {\n    // GET request \u2192 Data class\n    val post = Api.get("https://jsonplaceholder.typicode.com/posts/1")\n        .execute()\n        .to(Post::class.java)\n    \n    println("Post ID: ${post.id}")\n    println("Post Title: ${post.title}")\n    println("Post Body: ${post.body}")\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"post-request-with-json-body",children:"POST Request with JSON Body"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\n\ndata class Post(\n    val id: Int,\n    val userId: Int,\n    val title: String,\n    val body: String\n)\n\nfun main() {\n    // Create request body\n    val newPost = mapOf(\n        "title" to "My Kotlin Post",\n        "body" to "This post was created from Kotlin!",\n        "userId" to 1\n    )\n    \n    // POST request\n    val response = Api.post("https://jsonplaceholder.typicode.com/posts")\n        .body(newPost)\n        .execute()\n    \n    println("Status Code: ${response.code()}")\n    \n    // Parse response to Map\n    val responseMap = response.toMap()\n    println("Created Post ID: ${responseMap["id"]}")\n    println("Created Post Title: ${responseMap["title"]}")\n    \n    // Parse response to Data class\n    val createdPost = response.to(Post::class.java)\n    println("Created Post: ${createdPost.title}")\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Sample Response JSON:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Sample Value"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"id"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Int"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"101"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"title"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"My Kotlin Post"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"body"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"This post was created from Kotlin!"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"userId"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Int"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"1"})})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"query-parameters-and-headers",children:"Query Parameters and Headers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\n\nfun main() {\n    val response = Api.get("https://jsonplaceholder.typicode.com/posts")\n        .query("userId", 1)\n        .query("_limit", 5)\n        .header("Authorization", "Bearer token123")\n        .header("User-Agent", "MyApp/1.0")\n        .execute()\n    \n    val posts = response.toList()\n    println("Found ${posts.size} posts")\n    \n    // Process each post\n    posts.forEachIndexed { index, postObj ->\n        val post = postObj as Map<String, Any>\n        println("Post ${post["id"]}: ${post["title"]}")\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"async-requests",children:"Async Requests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\n\nfun main() {\n    Api.get("https://jsonplaceholder.typicode.com/posts/1")\n        .async { response ->\n            println("Async response: ${response.body()}")\n            println("Status: ${response.code()}")\n        }\n    \n    // Main thread continues...\n    println("Request sent asynchronously")\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"complex-nested-objects",children:"Complex Nested Objects"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\n\ndata class User(\n    val id: Int,\n    val name: String,\n    val username: String,\n    val email: String,\n    val phone: String,\n    val website: String,\n    val address: Address,\n    val company: Company\n)\n\ndata class Address(\n    val street: String,\n    val suite: String,\n    val city: String,\n    val zipcode: String,\n    val geo: Geo\n)\n\ndata class Geo(\n    val lat: String,\n    val lng: String\n)\n\ndata class Company(\n    val name: String,\n    val catchPhrase: String,\n    val bs: String\n)\n\nfun main() {\n    val user = Api.get("https://jsonplaceholder.typicode.com/users/1")\n        .execute()\n        .to(User::class.java)\n    \n    println("User Name: ${user.name}")\n    println("User Email: ${user.email}")\n    println("User Address: ${user.address.street}, ${user.address.city}")\n    println("User Company: ${user.company.name}")\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Sample User JSON Response:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Sample Value"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"id"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Int"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"1"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"name"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"Leanne Graham"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"email"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"Sincere@april.biz"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"phone"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"1-770-736-8031 x56442"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"website"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"hildegard.org"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"address.street"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"Kulas Light"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"address.city"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"Gwenborough"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"company.name"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"Romaguera-Crona"'})})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\nimport io.mochaapi.client.exception.*\n\ndata class Post(\n    val id: Int,\n    val userId: Int,\n    val title: String,\n    val body: String\n)\n\nfun main() {\n    try {\n        val response = Api.get("https://jsonplaceholder.typicode.com/posts/1")\n            .execute()\n        \n        if (response.isError()) {\n            println("HTTP Error: ${response.code()}")\n            return\n        }\n        \n        val post = response.to(Post::class.java)\n        println("Success: ${post.title}")\n        \n    } catch (e: ApiException) {\n        println("Network/HTTP Error: ${e.message}")\n    } catch (e: JsonException) {\n        println("JSON Parsing Error: ${e.message}")\n    } catch (e: Exception) {\n        println("Unexpected Error: ${e.message}")\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"list-processing",children:"List Processing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\n\ndata class Post(\n    val id: Int,\n    val userId: Int,\n    val title: String,\n    val body: String\n)\n\nfun main() {\n    val response = Api.get("https://jsonplaceholder.typicode.com/posts")\n        .query("userId", 1)\n        .query("_limit", 3)\n        .execute()\n    \n    val posts = response.toList()\n    println("Found ${posts.size} posts for user 1")\n    \n    posts.forEach { postObj ->\n        val post = postObj as Map<String, Any>\n        println("Post ${post["id"]}: ${post["title"]}")\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"functional-style-with-extension-functions",children:"Functional Style with Extension Functions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\n\n// Extension function for cleaner syntax\nfun ApiRequest.executeToMap(): Map<String, Any> = execute().toMap()\n\nfun main() {\n    val posts = Api.get("https://jsonplaceholder.typicode.com/posts")\n        .query("userId", 1)\n        .query("_limit", 2)\n        .executeToMap()\n    \n    println("Posts: $posts")\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/MochaJSON/usage/java-examples",children:"Java Examples"})})," - See equivalent Java code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/MochaJSON/usage/json-handling",children:"JSON Handling"})})," - Advanced JSON parsing techniques"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/MochaJSON/api/overview",children:"API Reference"})})," - Complete API documentation"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);