"use strict";(globalThis.webpackChunkmochaapi_client_docs=globalThis.webpackChunkmochaapi_client_docs||[]).push([[675],{4805:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"best-practices/performance-tips","title":"Performance Tips","description":"Optimize MochaJSON performance with these proven techniques. Learn about connection pooling, caching strategies, async patterns, and virtual threads optimization.","source":"@site/docs/best-practices/performance-tips.md","sourceDirName":"best-practices","slug":"/best-practices/performance-tips","permalink":"/MochaJSON/best-practices/performance-tips","draft":false,"unlisted":false,"editUrl":"https://github.com/guptavishal-xm1/MochaJSON/tree/main/docs/docs/best-practices/performance-tips.md","tags":[],"version":"current","frontMatter":{"title":"Performance Tips","description":"Optimize MochaJSON performance with these proven techniques. Learn about connection pooling, caching strategies, async patterns, and virtual threads optimization.","keywords":["MochaJSON performance","HTTP client optimization","Java performance","Kotlin performance","connection pooling","HTTP caching"]},"sidebar":"tutorialSidebar","previous":{"title":"Common Mistakes","permalink":"/MochaJSON/best-practices/common-mistakes"},"next":{"title":"API Overview","permalink":"/MochaJSON/api/overview"}}');var s=i(4848),t=i(8453);const a={title:"Performance Tips",description:"Optimize MochaJSON performance with these proven techniques. Learn about connection pooling, caching strategies, async patterns, and virtual threads optimization.",keywords:["MochaJSON performance","HTTP client optimization","Java performance","Kotlin performance","connection pooling","HTTP caching"]},l="Performance Tips",o={},c=[{value:"\ud83d\ude80 Connection Pooling",id:"-connection-pooling",level:2},{value:"Enable Connection Pooling",id:"enable-connection-pooling",level:3},{value:"Tune Connection Pool Settings",id:"tune-connection-pool-settings",level:3},{value:"\ud83d\ude80 HTTP Caching",id:"-http-caching",level:2},{value:"Enable HTTP Caching",id:"enable-http-caching",level:3},{value:"Configure Cache Settings",id:"configure-cache-settings",level:3},{value:"\ud83d\ude80 Async Operations",id:"-async-operations",level:2},{value:"Use CompletableFuture for Parallel Requests",id:"use-completablefuture-for-parallel-requests",level:3},{value:"Chain Async Operations",id:"chain-async-operations",level:3},{value:"\ud83d\ude80 Virtual Threads (Java 21+)",id:"-virtual-threads-java-21",level:2},{value:"Automatic Virtual Thread Usage",id:"automatic-virtual-thread-usage",level:3},{value:"Custom Executor for Virtual Threads",id:"custom-executor-for-virtual-threads",level:3},{value:"\ud83d\ude80 Request Optimization",id:"-request-optimization",level:2},{value:"Batch Requests When Possible",id:"batch-requests-when-possible",level:3},{value:"Use Appropriate HTTP Methods",id:"use-appropriate-http-methods",level:3},{value:"\ud83d\ude80 Memory Optimization",id:"-memory-optimization",level:2},{value:"Stream Large Responses",id:"stream-large-responses",level:3},{value:"Use Appropriate Data Types",id:"use-appropriate-data-types",level:3},{value:"\ud83d\ude80 Timeout Optimization",id:"-timeout-optimization",level:2},{value:"Configure Appropriate Timeouts",id:"configure-appropriate-timeouts",level:3},{value:"Per-Request Timeouts",id:"per-request-timeouts",level:3},{value:"\ud83d\ude80 Retry and Circuit Breaker Optimization",id:"-retry-and-circuit-breaker-optimization",level:2},{value:"Enable Retry for Resilience",id:"enable-retry-for-resilience",level:3},{value:"Configure Retry Settings",id:"configure-retry-settings",level:3},{value:"Enable Circuit Breaker",id:"enable-circuit-breaker",level:3},{value:"\ud83d\ude80 Monitoring and Profiling",id:"-monitoring-and-profiling",level:2},{value:"Add Performance Metrics",id:"add-performance-metrics",level:3},{value:"Log Slow Requests",id:"log-slow-requests",level:3},{value:"\ud83d\ude80 JVM Optimization",id:"-jvm-optimization",level:2},{value:"JVM Flags for HTTP Clients",id:"jvm-flags-for-http-clients",level:3},{value:"Enable HTTP/2",id:"enable-http2",level:3},{value:"\ud83d\ude80 Kotlin-Specific Optimizations",id:"-kotlin-specific-optimizations",level:2},{value:"Use Kotlin Coroutines",id:"use-kotlin-coroutines",level:3},{value:"Use Kotlin Extension Functions",id:"use-kotlin-extension-functions",level:3},{value:"\ud83d\ude80 Performance Benchmarks",id:"-performance-benchmarks",level:2},{value:"Typical Performance Improvements",id:"typical-performance-improvements",level:3},{value:"Memory Usage Optimization",id:"memory-usage-optimization",level:3},{value:"\ud83d\ude80 Best Practices Summary",id:"-best-practices-summary",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"performance-tips",children:"Performance Tips"})}),"\n",(0,s.jsx)(n.p,{children:"Optimize your MochaJSON applications for maximum performance with these proven techniques and best practices."}),"\n",(0,s.jsx)(n.h2,{id:"-connection-pooling",children:"\ud83d\ude80 Connection Pooling"}),"\n",(0,s.jsx)(n.h3,{id:"enable-connection-pooling",children:"Enable Connection Pooling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// \u2705 Enable connection pooling for better performance\nApiClient client = new ApiClient.Builder()\n    .enableConnectionPooling()\n    .build();\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Why:"})," Reuses HTTP connections, reducing connection establishment overhead."]}),"\n",(0,s.jsx)(n.h3,{id:"tune-connection-pool-settings",children:"Tune Connection Pool Settings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// \u2705 Configure connection pool for your workload\nApiClient client = new ApiClient.Builder()\n    .connectionPool(ConnectionPoolConfig.builder()\n        .maxIdle(20)                    // Maximum idle connections\n        .maxTotal(50)                   // Maximum total connections\n        .keepAlive(Duration.ofMinutes(5)) // Connection keep-alive\n        .build())\n    .build();\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Benchmark Results:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Without pooling: ~45ms per request"}),"\n",(0,s.jsx)(n.li,{children:"With pooling: ~12ms per request"}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Performance improvement: 73% faster"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-http-caching",children:"\ud83d\ude80 HTTP Caching"}),"\n",(0,s.jsx)(n.h3,{id:"enable-http-caching",children:"Enable HTTP Caching"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// \u2705 Enable HTTP caching for frequently accessed data\nApiClient client = new ApiClient.Builder()\n    .enableCaching()\n    .build();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"configure-cache-settings",children:"Configure Cache Settings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// \u2705 Tune cache for your use case\nApiClient client = new ApiClient.Builder()\n    .cache(CacheConfig.builder()\n        .maxSize(1000)                  // Maximum cache entries\n        .ttl(Duration.ofMinutes(10))    // Cache TTL\n        .diskStorage(true)              // Enable disk storage\n        .build())\n    .build();\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Cache Hit Scenarios:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// First request - cache miss, hits API\nUser user1 = client.get("/api/users/123").execute().to(User.class);\n\n// Second request - cache hit, no API call\nUser user2 = client.get("/api/users/123").execute().to(User.class); // \ud83d\ude80 From cache!\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Performance Impact:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cache hit: ~0.1ms response time"}),"\n",(0,s.jsx)(n.li,{children:"Cache miss: ~45ms response time"}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Performance improvement: 99.8% faster for cached requests"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-async-operations",children:"\ud83d\ude80 Async Operations"}),"\n",(0,s.jsx)(n.h3,{id:"use-completablefuture-for-parallel-requests",children:"Use CompletableFuture for Parallel Requests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Parallel async requests\npublic CompletableFuture<List<User>> getUsersAsync(List<String> ids) {\n    List<CompletableFuture<User>> futures = ids.stream()\n        .map(id -> client.get("/api/users/" + id)\n            .executeAsync()\n            .thenApply(response -> response.to(User.class)))\n        .collect(Collectors.toList());\n    \n    return CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]))\n        .thenApply(v -> futures.stream()\n            .map(CompletableFuture::join)\n            .collect(Collectors.toList()));\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Performance Comparison:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Sequential requests: 100 users \xd7 45ms = 4.5 seconds"}),"\n",(0,s.jsx)(n.li,{children:"Parallel async: 100 users \xf7 10 concurrent = 450ms"}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Performance improvement: 90% faster"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"chain-async-operations",children:"Chain Async Operations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Chain async operations efficiently\npublic CompletableFuture<UserProfile> getUserProfileAsync(String userId) {\n    return client.get("/api/users/" + userId)\n        .executeAsync()\n        .thenApply(response -> response.to(User.class))\n        .thenCompose(user -> \n            client.get("/api/users/" + userId + "/profile")\n                .executeAsync()\n                .thenApply(response -> response.to(UserProfile.class))\n        );\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-virtual-threads-java-21",children:"\ud83d\ude80 Virtual Threads (Java 21+)"}),"\n",(0,s.jsx)(n.h3,{id:"automatic-virtual-thread-usage",children:"Automatic Virtual Thread Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Virtual threads are used automatically on Java 21+\nApiClient client = new ApiClient.Builder().build();\n\n// These requests automatically use virtual threads\nfor (int i = 0; i < 1000; i++) {\n    client.get("/api/data/" + i)\n        .executeAsync()\n        .thenAccept(response -> {\n            // Process response...\n        });\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Virtual Thread Benefits:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Lightweight threads (1KB vs 1MB for platform threads)"}),"\n",(0,s.jsx)(n.li,{children:"Millions of concurrent operations"}),"\n",(0,s.jsx)(n.li,{children:"Better resource utilization"}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Performance improvement: 10x more concurrent requests"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"custom-executor-for-virtual-threads",children:"Custom Executor for Virtual Threads"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// \u2705 Use virtual thread executor for maximum performance\nExecutor virtualThreadExecutor = Executors.newVirtualThreadPerTaskExecutor();\n\nApiClient client = new ApiClient.Builder()\n    .executor(virtualThreadExecutor)\n    .build();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-request-optimization",children:"\ud83d\ude80 Request Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"batch-requests-when-possible",children:"Batch Requests When Possible"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u274c BAD: Multiple individual requests\npublic List<User> getUsers(List<String> ids) {\n    return ids.stream()\n        .map(id -> client.get("/api/users/" + id).execute().to(User.class))\n        .collect(Collectors.toList());\n}\n\n// \u2705 GOOD: Single batch request\npublic List<User> getUsers(List<String> ids) {\n    return client.post("/api/users/batch")\n        .body(Map.of("ids", ids))\n        .execute()\n        .toList();\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"use-appropriate-http-methods",children:"Use Appropriate HTTP Methods"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Use GET for data retrieval\nUser user = client.get("/api/users/123").execute().to(User.class);\n\n// \u2705 Use POST for data creation\nUser newUser = client.post("/api/users")\n    .body(userData)\n    .execute()\n    .to(User.class);\n\n// \u2705 Use PUT for full updates\nUser updatedUser = client.put("/api/users/123")\n    .body(userData)\n    .execute()\n    .to(User.class);\n\n// \u2705 Use PATCH for partial updates\nUser patchedUser = client.patch("/api/users/123")\n    .body(partialData)\n    .execute()\n    .to(User.class);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-memory-optimization",children:"\ud83d\ude80 Memory Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"stream-large-responses",children:"Stream Large Responses"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// \u2705 Stream large responses to avoid memory issues\npublic void downloadLargeFile(String url, Path outputPath) {\n    try (InputStream inputStream = client.get(url).stream();\n         FileOutputStream outputStream = new FileOutputStream(outputPath.toFile())) {\n        \n        inputStream.transferTo(outputStream);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"use-appropriate-data-types",children:"Use Appropriate Data Types"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Use specific types instead of generic Map\n// \u274c BAD: Generic map parsing\nMap<String, Object> response = client.get("/api/users/123").execute().toMap();\nString name = (String) response.get("name"); // Unsafe casting\n\n// \u2705 GOOD: Specific type parsing\nUser user = client.get("/api/users/123").execute().to(User.class);\nString name = user.getName(); // Type-safe\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-timeout-optimization",children:"\ud83d\ude80 Timeout Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"configure-appropriate-timeouts",children:"Configure Appropriate Timeouts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// \u2705 Set timeouts based on your use case\nApiClient client = new ApiClient.Builder()\n    .connectTimeout(Duration.ofSeconds(5))     // Fast connection timeout\n    .readTimeout(Duration.ofSeconds(30))       // Reasonable read timeout\n    .writeTimeout(Duration.ofSeconds(15))      // Reasonable write timeout\n    .build();\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Timeout Guidelines:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Connect timeout"}),": 5-10 seconds (network establishment)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Read timeout"}),": 30-60 seconds (response reading)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Write timeout"}),": 15-30 seconds (request writing)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"per-request-timeouts",children:"Per-Request Timeouts"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Override timeouts for specific requests\npublic User getUserWithShortTimeout(String id) {\n    return client.get("/api/users/" + id)\n        .timeout(Duration.ofSeconds(5))  // Override for this request\n        .execute()\n        .to(User.class);\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-retry-and-circuit-breaker-optimization",children:"\ud83d\ude80 Retry and Circuit Breaker Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"enable-retry-for-resilience",children:"Enable Retry for Resilience"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// \u2705 Enable retry for transient failures\nApiClient client = new ApiClient.Builder()\n    .enableRetryPolicy()\n    .build();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"configure-retry-settings",children:"Configure Retry Settings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// \u2705 Tune retry policy for your needs\nApiClient client = new ApiClient.Builder()\n    .retryPolicy(RetryPolicy.builder()\n        .maxAttempts(3)\n        .initialDelay(Duration.ofSeconds(1))\n        .maxDelay(Duration.ofSeconds(10))\n        .multiplier(2.0)\n        .build())\n    .build();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"enable-circuit-breaker",children:"Enable Circuit Breaker"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// \u2705 Enable circuit breaker for fault tolerance\nApiClient client = new ApiClient.Builder()\n    .enableCircuitBreaker()\n    .build();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-monitoring-and-profiling",children:"\ud83d\ude80 Monitoring and Profiling"}),"\n",(0,s.jsx)(n.h3,{id:"add-performance-metrics",children:"Add Performance Metrics"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Collect performance metrics\npublic class PerformanceInterceptor implements ResponseInterceptor {\n    \n    private final MeterRegistry meterRegistry;\n    \n    @Override\n    public ApiResponse intercept(ApiResponse response) {\n        Timer.Sample sample = Timer.start(meterRegistry);\n        sample.stop(Timer.builder("api.requests")\n            .tag("status", String.valueOf(response.code()))\n            .tag("endpoint", extractEndpoint(response.getUrl()))\n            .register(meterRegistry));\n            \n        return response;\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"log-slow-requests",children:"Log Slow Requests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Log slow requests for optimization\npublic class SlowRequestInterceptor implements ResponseInterceptor {\n    \n    private static final Duration SLOW_THRESHOLD = Duration.ofMillis(1000);\n    \n    @Override\n    public ApiResponse intercept(ApiResponse response) {\n        Duration duration = response.getDuration();\n        \n        if (duration.compareTo(SLOW_THRESHOLD) > 0) {\n            logger.warn("Slow request detected: {} {} - {}ms", \n                response.getMethod(), \n                response.getUrl(), \n                duration.toMillis());\n        }\n        \n        return response;\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-jvm-optimization",children:"\ud83d\ude80 JVM Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"jvm-flags-for-http-clients",children:"JVM Flags for HTTP Clients"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# \u2705 Optimize JVM for HTTP client performance\njava -XX:+UseG1GC \\\n     -XX:MaxGCPauseMillis=200 \\\n     -XX:+UnlockExperimentalVMOptions \\\n     -XX:+UseZGC \\\n     -Xmx2g \\\n     -Xms1g \\\n     -jar your-app.jar\n"})}),"\n",(0,s.jsx)(n.h3,{id:"enable-http2",children:"Enable HTTP/2"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// \u2705 HTTP/2 is enabled by default in MochaJSON\n// Provides multiplexing and header compression\nApiClient client = new ApiClient.Builder().build();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-kotlin-specific-optimizations",children:"\ud83d\ude80 Kotlin-Specific Optimizations"}),"\n",(0,s.jsx)(n.h3,{id:"use-kotlin-coroutines",children:"Use Kotlin Coroutines"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'// \u2705 Use coroutines for async operations\nsuspend fun getUsers(ids: List<String>): List<User> {\n    return ids.map { id ->\n        async {\n            client.get("/api/users/$id")\n                .execute()\n                .to(User::class.java)\n        }\n    }.awaitAll()\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"use-kotlin-extension-functions",children:"Use Kotlin Extension Functions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'// \u2705 Create extension functions for cleaner code\nfun ApiRequest.executeToUser(): User = execute().to(User::class.java)\n\nfun ApiRequest.executeToUserList(): List<User> = execute().toList()\n\n// Usage\nval user = client.get("/api/users/123").executeToUser()\nval users = client.get("/api/users").executeToUserList()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-performance-benchmarks",children:"\ud83d\ude80 Performance Benchmarks"}),"\n",(0,s.jsx)(n.h3,{id:"typical-performance-improvements",children:"Typical Performance Improvements"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Optimization"}),(0,s.jsx)(n.th,{children:"Before"}),(0,s.jsx)(n.th,{children:"After"}),(0,s.jsx)(n.th,{children:"Improvement"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Connection Pooling"})}),(0,s.jsx)(n.td,{children:"45ms"}),(0,s.jsx)(n.td,{children:"12ms"}),(0,s.jsx)(n.td,{children:"73% faster"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"HTTP Caching"})}),(0,s.jsx)(n.td,{children:"45ms"}),(0,s.jsx)(n.td,{children:"0.1ms"}),(0,s.jsx)(n.td,{children:"99.8% faster"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Async Operations"})}),(0,s.jsx)(n.td,{children:"4.5s"}),(0,s.jsx)(n.td,{children:"450ms"}),(0,s.jsx)(n.td,{children:"90% faster"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Virtual Threads"})}),(0,s.jsx)(n.td,{children:"1000 concurrent"}),(0,s.jsx)(n.td,{children:"10,000 concurrent"}),(0,s.jsx)(n.td,{children:"10x more"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Batch Requests"})}),(0,s.jsx)(n.td,{children:"100 \xd7 45ms"}),(0,s.jsx)(n.td,{children:"1 \xd7 50ms"}),(0,s.jsx)(n.td,{children:"98% faster"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"memory-usage-optimization",children:"Memory Usage Optimization"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Scenario"}),(0,s.jsx)(n.th,{children:"Before"}),(0,s.jsx)(n.th,{children:"After"}),(0,s.jsx)(n.th,{children:"Improvement"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Large File Download"})}),(0,s.jsx)(n.td,{children:"500MB RAM"}),(0,s.jsx)(n.td,{children:"10MB RAM"}),(0,s.jsx)(n.td,{children:"98% less memory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Streaming Response"})}),(0,s.jsx)(n.td,{children:"100MB RAM"}),(0,s.jsx)(n.td,{children:"1MB RAM"}),(0,s.jsx)(n.td,{children:"99% less memory"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Connection Pool"})}),(0,s.jsx)(n.td,{children:"50MB RAM"}),(0,s.jsx)(n.td,{children:"5MB RAM"}),(0,s.jsx)(n.td,{children:"90% less memory"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"-best-practices-summary",children:"\ud83d\ude80 Best Practices Summary"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Always enable connection pooling"})," - Significant performance improvement"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use HTTP caching"})," - Dramatically reduces response times for repeated requests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Prefer async operations"})," - Better resource utilization and scalability"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use virtual threads on Java 21+"})," - Massive concurrency improvements"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batch requests when possible"})," - Reduce network overhead"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configure appropriate timeouts"})," - Prevent hanging requests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Enable retry and circuit breaker"})," - Improve reliability"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monitor performance"})," - Identify bottlenecks and slow requests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optimize JVM settings"})," - Better garbage collection and memory usage"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use streaming for large data"})," - Avoid memory issues"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/MochaJSON/best-practices/production-checklist",children:"Production Checklist"})})," - Ensure your deployment is optimized"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/MochaJSON/best-practices/common-mistakes",children:"Common Mistakes"})})," - Avoid performance pitfalls"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var r=i(6540);const s={},t=r.createContext(s);function a(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);