"use strict";(globalThis.webpackChunkmochaapi_client_docs=globalThis.webpackChunkmochaapi_client_docs||[]).push([[303],{2571:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"migration-guide","title":"Migration Guide","description":"Complete migration guide from MochaJSON v1.0.x to v1.1.0 with examples and best practices.","source":"@site/docs/migration-guide.md","sourceDirName":".","slug":"/migration-guide","permalink":"/MochaJSON/migration-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/guptavishal-xm1/MochaJSON/tree/main/docs/docs/migration-guide.md","tags":[],"version":"current","frontMatter":{"title":"Migration Guide","description":"Complete migration guide from MochaJSON v1.0.x to v1.1.0 with examples and best practices."},"sidebar":"tutorialSidebar","previous":{"title":"Migrating from OkHttp + Gson","permalink":"/MochaJSON/migration/from-okhttp"},"next":{"title":"v1.1.0 \u2192 v1.2.0 Migration","permalink":"/MochaJSON/migration-guide-v12"}}');var r=i(4848),s=i(8453);const a={title:"Migration Guide",description:"Complete migration guide from MochaJSON v1.0.x to v1.1.0 with examples and best practices."},o="Migration Guide",l={},c=[{value:"What&#39;s New in v1.1.0",id:"whats-new-in-v110",level:2},{value:"\ud83c\udd95 New Features",id:"-new-features",level:3},{value:"\ud83d\udd12 Security Improvements",id:"-security-improvements",level:3},{value:"\u26a1 Performance Enhancements",id:"-performance-enhancements",level:3},{value:"Backward Compatibility",id:"backward-compatibility",level:2},{value:"Your Existing Code Still Works",id:"your-existing-code-still-works",level:3},{value:"Optional Migration Paths",id:"optional-migration-paths",level:2},{value:"1. Basic Migration to ApiClient",id:"1-basic-migration-to-apiclient",level:3},{value:"2. Advanced Configuration Migration",id:"2-advanced-configuration-migration",level:3},{value:"3. Async Operations Migration",id:"3-async-operations-migration",level:3},{value:"Step-by-Step Migration",id:"step-by-step-migration",level:2},{value:"Step 1: Update Dependencies",id:"step-1-update-dependencies",level:3},{value:"Step 2: Test Existing Code",id:"step-2-test-existing-code",level:3},{value:"Step 3: Optional - Migrate to ApiClient",id:"step-3-optional---migrate-to-apiclient",level:3},{value:"Step 4: Add Interceptors (Optional)",id:"step-4-add-interceptors-optional",level:3},{value:"Step 5: Enable Logging (Optional)",id:"step-5-enable-logging-optional",level:3},{value:"Migration Examples",id:"migration-examples",level:2},{value:"Example 1: Simple API Client",id:"example-1-simple-api-client",level:3},{value:"Example 2: Async Operations",id:"example-2-async-operations",level:3},{value:"Example 3: Error Handling",id:"example-3-error-handling",level:3},{value:"Best Practices for Migration",id:"best-practices-for-migration",level:2},{value:"1. Gradual Migration",id:"1-gradual-migration",level:3},{value:"2. Centralized Configuration",id:"2-centralized-configuration",level:3},{value:"3. Environment-Specific Configuration",id:"3-environment-specific-configuration",level:3},{value:"4. Testing",id:"4-testing",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Performance Considerations",id:"performance-considerations",level:3},{value:"Security Notes",id:"security-notes",level:3},{value:"Need Help?",id:"need-help",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"migration-guide",children:"Migration Guide"})}),"\n",(0,r.jsxs)(n.p,{children:["This guide helps you migrate from MochaJSON v1.0.x to v1.1.0. The good news is that ",(0,r.jsx)(n.strong,{children:"MochaJSON v1.1.0 is 100% backward compatible"})," with v1.0.x, so your existing code will continue to work without any changes!"]}),"\n",(0,r.jsx)(n.h2,{id:"whats-new-in-v110",children:"What's New in v1.1.0"}),"\n",(0,r.jsx)(n.h3,{id:"-new-features",children:"\ud83c\udd95 New Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ApiClient with Builder Pattern"}),": Advanced configuration with timeouts, interceptors, and logging"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Virtual Threads Support"}),": Automatic use of Java 21 virtual threads with fallback support"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Request/Response Interceptors"}),": Powerful interceptor system for authentication, logging, and more"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Enhanced Async APIs"}),": Modern CompletableFuture support with improved async operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Security Enhancements"}),": URL validation, hardened JSON parsing, and input sanitization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configurable Timeouts"}),": Fine-grained timeout control for connection, read, and write operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Optional Logging"}),": SLF4J integration for comprehensive request/response logging"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"-security-improvements",children:"\ud83d\udd12 Security Improvements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"URL validation prevents open redirect attacks"}),"\n",(0,r.jsx)(n.li,{children:"Hardened JSON parsing with disabled polymorphic typing"}),"\n",(0,r.jsx)(n.li,{children:"Enhanced input validation and sanitization"}),"\n",(0,r.jsx)(n.li,{children:"Configurable timeouts for DoS protection"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"-performance-enhancements",children:"\u26a1 Performance Enhancements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Virtual threads for better concurrent performance (Java 21+)"}),"\n",(0,r.jsx)(n.li,{children:"Improved async operation handling"}),"\n",(0,r.jsx)(n.li,{children:"Better resource management and cleanup"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"backward-compatibility",children:"Backward Compatibility"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u2705 All existing v1.0.x code works exactly the same in v1.1.0!"})}),"\n",(0,r.jsx)(n.h3,{id:"your-existing-code-still-works",children:"Your Existing Code Still Works"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// This code from v1.0.x works exactly the same in v1.1.0\nApiResponse response = Api.get("https://api.example.com/data")\n    .query("page", 1)\n    .execute();\n\nMap<String, Object> data = response.toMap();\nUser user = response.to(User.class);\n\n// Async with callbacks still works\nApi.get("https://api.example.com/data")\n    .async(response -> {\n        System.out.println("Response: " + response.code());\n    });\n'})}),"\n",(0,r.jsx)(n.h2,{id:"optional-migration-paths",children:"Optional Migration Paths"}),"\n",(0,r.jsxs)(n.p,{children:["While not required, you can optionally migrate to the new ",(0,r.jsx)(n.code,{children:"ApiClient"})," for advanced features."]}),"\n",(0,r.jsx)(n.h3,{id:"1-basic-migration-to-apiclient",children:"1. Basic Migration to ApiClient"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Before (v1.0.x):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'ApiResponse response = Api.get("https://api.example.com/data")\n    .query("page", 1)\n    .execute();\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"After (v1.1.0) - Optional:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'ApiClient client = new ApiClient.Builder().build();\n\nApiResponse response = client.get("https://api.example.com/data")\n    .query("page", 1)\n    .execute();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-advanced-configuration-migration",children:"2. Advanced Configuration Migration"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Before (v1.0.x):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Limited configuration options\nApiResponse response = Api.get("https://api.example.com/data")\n    .header("Authorization", "Bearer " + getToken())\n    .execute();\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"After (v1.1.0) - Enhanced:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'ApiClient client = new ApiClient.Builder()\n    .connectTimeout(Duration.ofSeconds(10))\n    .readTimeout(Duration.ofSeconds(30))\n    .enableLogging()\n    .addRequestInterceptor(RequestInterceptor.bearerAuth(() -> getToken()))\n    .addResponseInterceptor(ResponseInterceptor.throwOnError())\n    .build();\n\nApiResponse response = client.get("https://api.example.com/data").execute();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-async-operations-migration",children:"3. Async Operations Migration"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Before (v1.0.x):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Api.get("https://api.example.com/data")\n    .async(response -> {\n        System.out.println("Response: " + response.code());\n    });\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"After (v1.1.0) - Enhanced:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// New CompletableFuture API\nCompletableFuture<ApiResponse> future = client.get("https://api.example.com/data")\n    .executeAsync();\n\nfuture.thenAccept(response -> {\n    System.out.println("Response: " + response.code());\n});\n\n// Or chain operations\nclient.get("https://api.example.com/data")\n    .executeAsync()\n    .thenApply(r -> r.toMap())\n    .thenAccept(data -> System.out.println("Data: " + data));\n'})}),"\n",(0,r.jsx)(n.h2,{id:"step-by-step-migration",children:"Step-by-Step Migration"}),"\n",(0,r.jsx)(n.h3,{id:"step-1-update-dependencies",children:"Step 1: Update Dependencies"}),"\n",(0,r.jsx)(n.p,{children:"Update your build files to use v1.1.0:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Gradle:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-gradle",children:'dependencies {\n    implementation("io.github.guptavishal-xm1:MochaJSON:1.1.0")\n    \n    // Optional: For logging support\n    implementation("org.slf4j:slf4j-api:2.0.9")\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Maven:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>io.github.guptavishal-xm1</groupId>\n    <artifactId>MochaJSON</artifactId>\n    <version>1.1.0</version>\n</dependency>\n\n\x3c!-- Optional: For logging support --\x3e\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-api</artifactId>\n    <version>2.0.9</version>\n</dependency>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"step-2-test-existing-code",children:"Step 2: Test Existing Code"}),"\n",(0,r.jsx)(n.p,{children:"Your existing code should work without changes. Run your tests to verify:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// All existing code continues to work\nApiResponse response = Api.get("https://api.example.com/data").execute();\nMap<String, Object> data = response.toMap();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"step-3-optional---migrate-to-apiclient",children:"Step 3: Optional - Migrate to ApiClient"}),"\n",(0,r.jsxs)(n.p,{children:["If you want to use the new advanced features, gradually migrate to ",(0,r.jsx)(n.code,{children:"ApiClient"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Create a configured client for your application\nApiClient client = new ApiClient.Builder()\n    .connectTimeout(Duration.ofSeconds(10))\n    .readTimeout(Duration.ofSeconds(30))\n    .build();\n\n// Replace static Api calls with client calls\n// OLD: Api.get("https://api.example.com/data").execute()\n// NEW: client.get("https://api.example.com/data").execute()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"step-4-add-interceptors-optional",children:"Step 4: Add Interceptors (Optional)"}),"\n",(0,r.jsx)(n.p,{children:"Add interceptors for cross-cutting concerns:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'ApiClient client = new ApiClient.Builder()\n    .addRequestInterceptor(RequestInterceptor.bearerAuth(() -> getToken()))\n    .addResponseInterceptor(ResponseInterceptor.throwOnError())\n    .build();\n\n// Now all requests automatically include authentication\nApiResponse response = client.get("https://api.example.com/data").execute();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"step-5-enable-logging-optional",children:"Step 5: Enable Logging (Optional)"}),"\n",(0,r.jsx)(n.p,{children:"Add logging for debugging and monitoring:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"ApiClient client = new ApiClient.Builder()\n    .enableLogging()  // Console logging\n    .build();\n\n// Or custom logging\nApiClient client = new ApiClient.Builder()\n    .addRequestInterceptor(RequestInterceptor.logging(logger::info))\n    .addResponseInterceptor(ResponseInterceptor.logging(logger::info))\n    .build();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"migration-examples",children:"Migration Examples"}),"\n",(0,r.jsx)(n.h3,{id:"example-1-simple-api-client",children:"Example 1: Simple API Client"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Before:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class UserService {\n    public User getUser(int id) {\n        ApiResponse response = Api.get("https://api.example.com/users/" + id).execute();\n        return response.to(User.class);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"After (Optional Enhancement):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class UserService {\n    private final ApiClient client;\n    \n    public UserService() {\n        this.client = new ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(5))\n            .readTimeout(Duration.ofSeconds(10))\n            .addRequestInterceptor(RequestInterceptor.bearerAuth(() -> getToken()))\n            .build();\n    }\n    \n    public User getUser(int id) {\n        ApiResponse response = client.get("https://api.example.com/users/" + id).execute();\n        return response.to(User.class);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"example-2-async-operations",children:"Example 2: Async Operations"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Before:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public void fetchUsersAsync(List<Integer> userIds) {\n    for (int id : userIds) {\n        Api.get("https://api.example.com/users/" + id)\n            .async(response -> {\n                User user = response.to(User.class);\n                processUser(user);\n            });\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"After (Enhanced):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public CompletableFuture<List<User>> fetchUsersAsync(List<Integer> userIds) {\n    ApiClient client = new ApiClient.Builder().build();\n    \n    List<CompletableFuture<User>> futures = userIds.stream()\n        .map(id -> client.get("https://api.example.com/users/" + id)\n            .executeAsync()\n            .thenApply(response -> response.to(User.class)))\n        .collect(Collectors.toList());\n    \n    return CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]))\n        .thenApply(v -> futures.stream()\n            .map(CompletableFuture::join)\n            .collect(Collectors.toList()));\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"example-3-error-handling",children:"Example 3: Error Handling"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Before:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'try {\n    ApiResponse response = Api.get("https://api.example.com/data").execute();\n    if (response.isError()) {\n        throw new RuntimeException("API Error: " + response.code());\n    }\n    return response.toMap();\n} catch (ApiException e) {\n    logger.error("Request failed", e);\n    throw e;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"After (Enhanced):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'ApiClient client = new ApiClient.Builder()\n    .addResponseInterceptor(ResponseInterceptor.throwOnError())  // Automatic error handling\n    .build();\n\ntry {\n    ApiResponse response = client.get("https://api.example.com/data").execute();\n    return response.toMap();\n} catch (ApiException e) {\n    logger.error("Request failed", e);\n    throw e;\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices-for-migration",children:"Best Practices for Migration"}),"\n",(0,r.jsx)(n.h3,{id:"1-gradual-migration",children:"1. Gradual Migration"}),"\n",(0,r.jsxs)(n.p,{children:["Don't try to migrate everything at once. Start with new code using ",(0,r.jsx)(n.code,{children:"ApiClient"}),", then gradually migrate existing code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Keep existing code working\nApiResponse response = Api.get("https://api.example.com/data").execute();\n\n// Use ApiClient for new features\nApiClient client = new ApiClient.Builder()\n    .addRequestInterceptor(RequestInterceptor.bearerAuth(() -> getToken()))\n    .build();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-centralized-configuration",children:"2. Centralized Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Create a centralized client configuration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class ApiClientFactory {\n    private static final ApiClient INSTANCE = new ApiClient.Builder()\n        .connectTimeout(Duration.ofSeconds(10))\n        .readTimeout(Duration.ofSeconds(30))\n        .addRequestInterceptor(RequestInterceptor.bearerAuth(() -> getToken()))\n        .addResponseInterceptor(ResponseInterceptor.throwOnError())\n        .build();\n    \n    public static ApiClient getClient() {\n        return INSTANCE;\n    }\n}\n\n// Use throughout your application\nApiClient client = ApiClientFactory.getClient();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-environment-specific-configuration",children:"3. Environment-Specific Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Configure clients based on environment:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class ApiClientFactory {\n    public static ApiClient createClient(Environment env) {\n        ApiClient.Builder builder = new ApiClient.Builder();\n        \n        if (env == Environment.PRODUCTION) {\n            builder.connectTimeout(Duration.ofSeconds(5))\n                   .readTimeout(Duration.ofSeconds(10));\n        } else {\n            builder.enableLogging()  // Only in dev/test\n                   .connectTimeout(Duration.ofSeconds(30))\n                   .readTimeout(Duration.ofSeconds(60));\n        }\n        \n        return builder.build();\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-testing",children:"4. Testing"}),"\n",(0,r.jsx)(n.p,{children:"Update your tests to work with both old and new approaches:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testUserFetch() {\n    // Both approaches should work\n    ApiResponse response1 = Api.get("https://api.example.com/users/1").execute();\n    ApiResponse response2 = client.get("https://api.example.com/users/1").execute();\n    \n    assertEquals(response1.toMap(), response2.toMap());\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Import Changes"}),": No import changes needed - all existing imports continue to work."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Method Signatures"}),": All existing method signatures are preserved."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exception Handling"}),": Exception handling remains the same."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Async Behavior"}),": Existing async code continues to work, but you can now use the enhanced CompletableFuture API."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Virtual threads are automatically used on Java 21+ for better performance"}),"\n",(0,r.jsx)(n.li,{children:"On Java 17 or earlier, MochaJSON falls back to cached thread pool"}),"\n",(0,r.jsx)(n.li,{children:"No code changes required for performance improvements"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"security-notes",children:"Security Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"URL validation is now enabled by default - malicious URLs will be rejected"}),"\n",(0,r.jsx)(n.li,{children:"JSON parsing is hardened against common attacks"}),"\n",(0,r.jsx)(n.li,{children:"These security improvements are automatic and don't require code changes"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"need-help",children:"Need Help?"}),"\n",(0,r.jsx)(n.p,{children:"If you encounter any issues during migration:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Check the ",(0,r.jsx)(n.a,{href:"/MochaJSON/api/api-reference",children:"API Reference"})]})," for detailed method documentation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Review the ",(0,r.jsx)(n.a,{href:"/MochaJSON/advanced/interceptors",children:"Advanced Features Guide"})]})," for new capabilities"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.strong,{children:["Report issues on ",(0,r.jsx)(n.a,{href:"https://github.com/guptavishal-xm1/MochaJSON/issues",children:"GitHub"})]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.strong,{children:["Join discussions on ",(0,r.jsx)(n.a,{href:"https://github.com/guptavishal-xm1/MochaJSON/discussions",children:"GitHub Discussions"})]})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"100% Backward Compatible"})," - No code changes required"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Enhanced Features Available"})," - Use ",(0,r.jsx)(n.code,{children:"ApiClient"})," for advanced capabilities"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Better Performance"})," - Virtual threads support (Java 21+)"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Improved Security"})," - URL validation and hardened JSON parsing"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Modern Async APIs"})," - CompletableFuture support"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Production Ready"})," - Interceptors, logging, and configurable timeouts"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"MochaJSON v1.1.0 provides a smooth upgrade path while introducing powerful new features for modern Java applications."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(6540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);