"use strict";(globalThis.webpackChunkmochaapi_client_docs=globalThis.webpackChunkmochaapi_client_docs||[]).push([[466],{1968:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","href":"/MochaJSON/getting-started","label":"\ud83d\ude80 Getting Started","docId":"getting-started","unlisted":false},{"type":"link","href":"/MochaJSON/comparison","label":"\u2696\ufe0f vs Alternatives","docId":"comparison","unlisted":false},{"type":"category","label":"\ud83d\udcd6 Usage Examples","items":[{"type":"link","href":"/MochaJSON/usage/java-examples","label":"Java Examples","docId":"usage/java-examples","unlisted":false},{"type":"link","href":"/MochaJSON/usage/kotlin-examples","label":"Kotlin Examples","docId":"usage/kotlin-examples","unlisted":false},{"type":"link","href":"/MochaJSON/usage/json-handling","label":"JSON Handling","docId":"usage/json-handling","unlisted":false},{"type":"link","href":"/MochaJSON/usage/error-handling-examples","label":"Error Handling Examples","docId":"usage/error-handling-examples","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"\ud83d\udd27 Advanced Features","items":[{"type":"link","href":"/MochaJSON/advanced-features","label":"Advanced Features","docId":"advanced-features","unlisted":false},{"type":"link","href":"/MochaJSON/advanced/interceptors","label":"Interceptors","docId":"advanced/interceptors","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"\u2705 Best Practices","items":[{"type":"link","href":"/MochaJSON/best-practices/production-checklist","label":"Production Checklist","docId":"best-practices/production-checklist","unlisted":false},{"type":"link","href":"/MochaJSON/best-practices/common-mistakes","label":"Common Mistakes","docId":"best-practices/common-mistakes","unlisted":false},{"type":"link","href":"/MochaJSON/best-practices/performance-tips","label":"Performance Tips","docId":"best-practices/performance-tips","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"\ud83d\udcda API Reference","items":[{"type":"link","href":"/MochaJSON/api/overview","label":"API Overview","docId":"api/overview","unlisted":false},{"type":"link","href":"/MochaJSON/api/api-reference","label":"API Reference","docId":"api/api-reference","unlisted":false},{"type":"link","href":"/MochaJSON/api/exceptions","label":"Exceptions","docId":"api/exceptions","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"\ud83d\udd04 Migration Guides","items":[{"type":"link","href":"/MochaJSON/migration/from-okhttp","label":"Migrating from OkHttp + Gson","docId":"migration/from-okhttp","unlisted":false},{"type":"link","href":"/MochaJSON/migration-guide","label":"Migration Guide","docId":"migration-guide","unlisted":false},{"type":"link","href":"/MochaJSON/migration-guide-v12","label":"v1.1.0 \u2192 v1.2.0 Migration","docId":"migration-guide-v12","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","href":"/MochaJSON/contributing","label":"\ud83e\udd1d Contributing","docId":"contributing","unlisted":false},{"type":"link","href":"/MochaJSON/license","label":"\ud83d\udcc4 License","docId":"license","unlisted":false}]},"docs":{"advanced-features":{"id":"advanced-features","title":"Advanced Features","description":"Learn about MochaJSON v1.1.0 advanced features including ApiClient, interceptors, virtual threads, and security enhancements.","sidebar":"tutorialSidebar"},"advanced/interceptors":{"id":"advanced/interceptors","title":"Interceptors","description":"Learn how to use MochaJSON interceptors for authentication, logging, request/response transformation, and cross-cutting concerns. Complete guide with examples.","sidebar":"tutorialSidebar"},"api/api-reference":{"id":"api/api-reference","title":"API Reference","description":"Complete reference for all classes, methods, and interfaces in MochaAPI Client v1.1.0.","sidebar":"tutorialSidebar"},"api/exceptions":{"id":"api/exceptions","title":"Exceptions","description":"Comprehensive guide to error handling and exception management in MochaAPI Client.","sidebar":"tutorialSidebar"},"api/overview":{"id":"api/overview","title":"API Overview","description":"MochaAPI Client provides a simple, fluent interface for making HTTP requests and parsing JSON responses in Java and Kotlin.","sidebar":"tutorialSidebar"},"best-practices/common-mistakes":{"id":"best-practices/common-mistakes","title":"Common Mistakes","description":"Avoid these common mistakes when using MochaJSON. Learn about error handling, async operations, connection management, and security pitfalls.","sidebar":"tutorialSidebar"},"best-practices/performance-tips":{"id":"best-practices/performance-tips","title":"Performance Tips","description":"Optimize MochaJSON performance with these proven techniques. Learn about connection pooling, caching strategies, async patterns, and virtual threads optimization.","sidebar":"tutorialSidebar"},"best-practices/production-checklist":{"id":"best-practices/production-checklist","title":"Production Checklist","description":"Essential checklist for deploying MochaJSON in production environments. Learn about timeout configuration, error handling, connection pooling, logging, and security hardening.","sidebar":"tutorialSidebar"},"comparison":{"id":"comparison","title":"MochaJSON vs Alternatives","description":"Compare MochaJSON with OkHttp+Gson, Spring RestTemplate, Apache HttpClient, and other Java HTTP client libraries. See why MochaJSON is the best choice for modern Java and Kotlin applications.","sidebar":"tutorialSidebar"},"contributing":{"id":"contributing","title":"Contributing","description":"We welcome contributions to the MochaAPI Client library! Here\'s how you can help make it better.","sidebar":"tutorialSidebar"},"getting-started":{"id":"getting-started","title":"Getting Started with MochaJSON","description":"Get up and running with MochaJSON v1.2.0 in minutes. Learn installation, basic usage, and production-grade features like connection pooling, retry mechanisms, and circuit breakers.","sidebar":"tutorialSidebar"},"index":{"id":"index","title":"MochaJSON \u2014 Unified HTTP & JSON Client for Java & Kotlin","description":"MochaJSON v1.2.0 is a production-ready HTTP client with automatic JSON parsing for Java & Kotlin. Features connection pooling, retry mechanisms, circuit breakers, HTTP caching, and file operations. Replace OkHttp + Gson with one dependency."},"license":{"id":"license","title":"License","description":"This project is licensed under the MIT License.","sidebar":"tutorialSidebar"},"migration-guide":{"id":"migration-guide","title":"Migration Guide","description":"Complete migration guide from MochaJSON v1.0.x to v1.1.0 with examples and best practices.","sidebar":"tutorialSidebar"},"migration-guide-v12":{"id":"migration-guide-v12","title":"Migration Guide - v1.1.0 to v1.2.0","description":"\ud83c\udf89 Good News: MochaAPI v1.2.0 maintains 100% backward compatibility with v1.1.0! All your existing code will continue to work without any changes.","sidebar":"tutorialSidebar"},"migration/from-okhttp":{"id":"migration/from-okhttp","title":"Migrating from OkHttp + Gson","description":"Complete migration guide from OkHttp + Gson to MochaJSON. Learn how to convert your existing HTTP client code with step-by-step examples and best practices.","sidebar":"tutorialSidebar"},"usage/error-handling-examples":{"id":"usage/error-handling-examples","title":"Error Handling Examples","description":"Comprehensive examples showing how to handle different HTTP status codes and errors with MochaAPI Client.","sidebar":"tutorialSidebar"},"usage/java-examples":{"id":"usage/java-examples","title":"Java Examples","description":"Complete Java usage examples for MochaAPI Client, including GET requests, POST requests, JSON parsing, and error handling.","sidebar":"tutorialSidebar"},"usage/json-handling":{"id":"usage/json-handling","title":"JSON Handling","description":"Advanced JSON parsing techniques with MochaAPI Client, including nested objects, arrays, and custom serialization.","sidebar":"tutorialSidebar"},"usage/kotlin-examples":{"id":"usage/kotlin-examples","title":"Kotlin Examples","description":"Complete Kotlin usage examples for MochaAPI Client, including GET requests, POST requests, JSON parsing, and error handling.","sidebar":"tutorialSidebar"}}}}')}}]);