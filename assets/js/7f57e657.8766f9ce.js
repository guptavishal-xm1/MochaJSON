"use strict";(globalThis.webpackChunkmochaapi_client_docs=globalThis.webpackChunkmochaapi_client_docs||[]).push([[221],{3802:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"usage/error-handling-examples","title":"Error Handling Examples","description":"Comprehensive examples showing how to handle different HTTP status codes and errors with MochaAPI Client.","source":"@site/docs/usage/error-handling-examples.md","sourceDirName":"usage","slug":"/usage/error-handling-examples","permalink":"/MochaJSON/usage/error-handling-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/guptavishal-xm1/MochaJSON/tree/main/docs/docs/usage/error-handling-examples.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"JSON Handling","permalink":"/MochaJSON/usage/json-handling"},"next":{"title":"Advanced Features","permalink":"/MochaJSON/advanced-features"}}');var t=s(4848),i=s(8453);const o={},a="Error Handling Examples",c={},l=[{value:"Basic Status Code Checking",id:"basic-status-code-checking",level:2},{value:"Comprehensive Error Handling",id:"comprehensive-error-handling",level:2},{value:"REST API Error Handling Patterns",id:"rest-api-error-handling-patterns",level:2},{value:"GET Request with Error Handling",id:"get-request-with-error-handling",level:3},{value:"POST Request with Validation Error Handling",id:"post-request-with-validation-error-handling",level:3},{value:"DELETE Request with Error Handling",id:"delete-request-with-error-handling",level:3},{value:"Async Error Handling",id:"async-error-handling",level:2},{value:"Error Response Parsing",id:"error-response-parsing",level:2},{value:"Custom Exception Classes",id:"custom-exception-classes",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Always Check Status Codes",id:"1-always-check-status-codes",level:3},{value:"2. Use Specific Status Code Methods",id:"2-use-specific-status-code-methods",level:3},{value:"3. Handle JSON Parsing Errors",id:"3-handle-json-parsing-errors",level:3},{value:"4. Provide Meaningful Error Messages",id:"4-provide-meaningful-error-messages",level:3},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"error-handling-examples",children:"Error Handling Examples"})}),"\n",(0,t.jsx)(n.p,{children:"Comprehensive examples showing how to handle different HTTP status codes and errors with MochaAPI Client."}),"\n",(0,t.jsx)(n.h2,{id:"basic-status-code-checking",children:"Basic Status Code Checking"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\n\npublic class ErrorHandlingExample {\n    public static void main(String[] args) {\n        ApiResponse response = Api.get("https://api.example.com/users/1").execute();\n        \n        // Check specific status codes\n        if (response.isOk()) {\n            System.out.println("\u2705 Request successful (200)");\n        } else if (response.isCreated()) {\n            System.out.println("\u2705 Resource created (201)");\n        } else if (response.isNotFound()) {\n            System.out.println("\u274c Resource not found (404)");\n        } else if (response.isUnauthorized()) {\n            System.out.println("\u274c Unauthorized access (401)");\n        } else if (response.isInternalServerError()) {\n            System.out.println("\u274c Server error (500)");\n        }\n        \n        // Get human-readable status description\n        System.out.println("Status: " + response.code() + " - " + response.getStatusDescription());\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"comprehensive-error-handling",children:"Comprehensive Error Handling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\nimport io.mochaapi.client.exception.*;\n\npublic class ComprehensiveErrorHandling {\n    public static void main(String[] args) {\n        try {\n            ApiResponse response = Api.get("https://api.example.com/users/1").execute();\n            \n            // Handle different response categories\n            if (response.isSuccess()) {\n                handleSuccess(response);\n            } else if (response.isClientError()) {\n                handleClientError(response);\n            } else if (response.isServerError()) {\n                handleServerError(response);\n            } else if (response.isRedirect()) {\n                handleRedirect(response);\n            }\n            \n        } catch (ApiException e) {\n            System.err.println("Network/HTTP Error: " + e.getMessage());\n        } catch (JsonException e) {\n            System.err.println("JSON Parsing Error: " + e.getMessage());\n        } catch (Exception e) {\n            System.err.println("Unexpected Error: " + e.getMessage());\n        }\n    }\n    \n    private static void handleSuccess(ApiResponse response) {\n        if (response.isOk()) {\n            System.out.println("\u2705 Data retrieved successfully");\n            User user = response.to(User.class);\n            System.out.println("User: " + user.getName());\n        } else if (response.isCreated()) {\n            System.out.println("\u2705 Resource created successfully");\n            User newUser = response.to(User.class);\n            System.out.println("Created user ID: " + newUser.getId());\n        } else if (response.isNoContent()) {\n            System.out.println("\u2705 Operation completed (no content returned)");\n        }\n    }\n    \n    private static void handleClientError(ApiResponse response) {\n        if (response.isBadRequest()) {\n            System.err.println("\u274c Bad Request (400): " + response.body());\n        } else if (response.isUnauthorized()) {\n            System.err.println("\u274c Unauthorized (401): Check your authentication");\n        } else if (response.isForbidden()) {\n            System.err.println("\u274c Forbidden (403): You don\'t have permission");\n        } else if (response.isNotFound()) {\n            System.err.println("\u274c Not Found (404): Resource doesn\'t exist");\n        } else if (response.isUnprocessableEntity()) {\n            System.err.println("\u274c Unprocessable Entity (422): " + response.body());\n        } else if (response.isTooManyRequests()) {\n            System.err.println("\u274c Rate Limited (429): Too many requests");\n        } else {\n            System.err.println("\u274c Client Error (" + response.code() + "): " + response.getStatusDescription());\n        }\n    }\n    \n    private static void handleServerError(ApiResponse response) {\n        if (response.isInternalServerError()) {\n            System.err.println("\u274c Internal Server Error (500): Server is having issues");\n        } else if (response.isBadGateway()) {\n            System.err.println("\u274c Bad Gateway (502): Upstream server error");\n        } else if (response.isServiceUnavailable()) {\n            System.err.println("\u274c Service Unavailable (503): Server is down for maintenance");\n        } else if (response.isGatewayTimeout()) {\n            System.err.println("\u274c Gateway Timeout (504): Request timed out");\n        } else {\n            System.err.println("\u274c Server Error (" + response.code() + "): " + response.getStatusDescription());\n        }\n    }\n    \n    private static void handleRedirect(ApiResponse response) {\n        System.out.println("\ud83d\udd04 Redirect (" + response.code() + "): " + response.getStatusDescription());\n        // Handle redirect logic if needed\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"rest-api-error-handling-patterns",children:"REST API Error Handling Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"get-request-with-error-handling",children:"GET Request with Error Handling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class UserService {\n    public User getUserById(int userId) {\n        try {\n            ApiResponse response = Api.get("https://api.example.com/users/" + userId)\n                .header("Authorization", "Bearer " + getAuthToken())\n                .execute();\n            \n            if (response.isOk()) {\n                return response.to(User.class);\n            } else if (response.isNotFound()) {\n                throw new UserNotFoundException("User with ID " + userId + " not found");\n            } else if (response.isUnauthorized()) {\n                throw new AuthenticationException("Invalid authentication token");\n            } else if (response.isForbidden()) {\n                throw new AuthorizationException("You don\'t have permission to access this user");\n            } else {\n                throw new ApiException("Unexpected error: " + response.code() + " - " + response.getStatusDescription());\n            }\n            \n        } catch (ApiException e) {\n            throw new ServiceException("Failed to fetch user", e);\n        } catch (JsonException e) {\n            throw new ServiceException("Failed to parse user data", e);\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"post-request-with-validation-error-handling",children:"POST Request with Validation Error Handling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class UserService {\n    public User createUser(User user) {\n        try {\n            ApiResponse response = Api.post("https://api.example.com/users")\n                .header("Authorization", "Bearer " + getAuthToken())\n                .body(user)\n                .execute();\n            \n            if (response.isCreated()) {\n                return response.to(User.class);\n            } else if (response.isBadRequest()) {\n                // Parse validation errors from response body\n                Map<String, Object> errorData = response.toMap();\n                throw new ValidationException("Validation failed: " + errorData.get("message"));\n            } else if (response.isUnprocessableEntity()) {\n                Map<String, Object> errorData = response.toMap();\n                throw new ValidationException("Unprocessable entity: " + errorData.get("errors"));\n            } else if (response.isConflict()) {\n                throw new ConflictException("User already exists");\n            } else {\n                throw new ApiException("Unexpected error: " + response.code() + " - " + response.getStatusDescription());\n            }\n            \n        } catch (ApiException e) {\n            throw new ServiceException("Failed to create user", e);\n        } catch (JsonException e) {\n            throw new ServiceException("Failed to parse response", e);\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"delete-request-with-error-handling",children:"DELETE Request with Error Handling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class UserService {\n    public boolean deleteUser(int userId) {\n        try {\n            ApiResponse response = Api.delete("https://api.example.com/users/" + userId)\n                .header("Authorization", "Bearer " + getAuthToken())\n                .execute();\n            \n            if (response.isOk() || response.isNoContent()) {\n                return true;\n            } else if (response.isNotFound()) {\n                return false; // User doesn\'t exist, consider it deleted\n            } else if (response.isUnauthorized()) {\n                throw new AuthenticationException("Invalid authentication token");\n            } else if (response.isForbidden()) {\n                throw new AuthorizationException("You don\'t have permission to delete this user");\n            } else {\n                throw new ApiException("Unexpected error: " + response.code() + " - " + response.getStatusDescription());\n            }\n            \n        } catch (ApiException e) {\n            throw new ServiceException("Failed to delete user", e);\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"async-error-handling",children:"Async Error Handling"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class AsyncErrorHandling {\n    public static void main(String[] args) {\n        Api.get("https://api.example.com/users/1")\n            .async(response -> {\n                try {\n                    if (response.isOk()) {\n                        User user = response.to(User.class);\n                        System.out.println("\u2705 User loaded: " + user.getName());\n                    } else if (response.isNotFound()) {\n                        System.out.println("\u274c User not found");\n                    } else if (response.isError()) {\n                        System.err.println("\u274c Error " + response.code() + ": " + response.getStatusDescription());\n                    }\n                } catch (JsonException e) {\n                    System.err.println("\u274c JSON parsing error: " + e.getMessage());\n                }\n            });\n        \n        // Main thread continues...\n        System.out.println("Request sent asynchronously");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"error-response-parsing",children:"Error Response Parsing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class ErrorResponseParsing {\n    public static void main(String[] args) {\n        try {\n            ApiResponse response = Api.post("https://api.example.com/users")\n                .body(invalidUserData)\n                .execute();\n            \n            if (response.isUnprocessableEntity()) {\n                // Parse structured error response\n                Map<String, Object> errorResponse = response.toMap();\n                \n                if (errorResponse.containsKey("errors")) {\n                    List<Map<String, Object>> errors = (List<Map<String, Object>>) errorResponse.get("errors");\n                    \n                    for (Map<String, Object> error : errors) {\n                        String field = (String) error.get("field");\n                        String message = (String) error.get("message");\n                        System.err.println("Validation error in " + field + ": " + message);\n                    }\n                }\n            }\n            \n        } catch (JsonException e) {\n            System.err.println("Failed to parse error response: " + e.getMessage());\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"custom-exception-classes",children:"Custom Exception Classes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Custom exceptions for better error handling\npublic class UserNotFoundException extends RuntimeException {\n    public UserNotFoundException(String message) {\n        super(message);\n    }\n}\n\npublic class AuthenticationException extends RuntimeException {\n    public AuthenticationException(String message) {\n        super(message);\n    }\n}\n\npublic class AuthorizationException extends RuntimeException {\n    public AuthorizationException(String message) {\n        super(message);\n    }\n}\n\npublic class ValidationException extends RuntimeException {\n    public ValidationException(String message) {\n        super(message);\n    }\n}\n\npublic class ConflictException extends RuntimeException {\n    public ConflictException(String message) {\n        super(message);\n    }\n}\n\npublic class ServiceException extends RuntimeException {\n    public ServiceException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-always-check-status-codes",children:"1. Always Check Status Codes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// \u2705 Good: Check status codes\nApiResponse response = Api.get(url).execute();\nif (response.isOk()) {\n    processData(response);\n} else {\n    handleError(response);\n}\n\n// \u274c Avoid: Ignoring status codes\nApiResponse response = Api.get(url).execute();\nprocessData(response); // This might fail!\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-use-specific-status-code-methods",children:"2. Use Specific Status Code Methods"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// \u2705 Good: Specific status checking\nif (response.isCreated()) {\n    // Handle resource creation\n} else if (response.isNotFound()) {\n    // Handle not found\n}\n\n// \u274c Avoid: Generic error checking only\nif (response.isError()) {\n    // Too generic - doesn't know what type of error\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-handle-json-parsing-errors",children:"3. Handle JSON Parsing Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// \u2705 Good: Handle JSON parsing separately\ntry {\n    User user = response.to(User.class);\n} catch (JsonException e) {\n    System.err.println("Failed to parse user data: " + e.getMessage());\n}\n\n// \u274c Avoid: Letting JSON errors bubble up\nUser user = response.to(User.class); // Might throw JsonException\n'})}),"\n",(0,t.jsx)(n.h3,{id:"4-provide-meaningful-error-messages",children:"4. Provide Meaningful Error Messages"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// \u2705 Good: Meaningful error messages\nif (response.isUnauthorized()) {\n    throw new AuthenticationException("Invalid API token. Please check your credentials.");\n}\n\n// \u274c Avoid: Generic error messages\nif (response.isUnauthorized()) {\n    throw new RuntimeException("Error");\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/MochaJSON/api/overview",children:"API Reference"})})," - Complete API documentation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/MochaJSON/usage/java-examples",children:"Java Examples"})})," - More usage examples"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/MochaJSON/usage/kotlin-examples",children:"Kotlin Examples"})})," - Kotlin-specific examples"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var r=s(6540);const t={},i=r.createContext(t);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);