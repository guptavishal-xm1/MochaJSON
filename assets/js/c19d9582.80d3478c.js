"use strict";(globalThis.webpackChunkmochaapi_client_docs=globalThis.webpackChunkmochaapi_client_docs||[]).push([[616],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var r=t(6540);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},9229:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"migration/from-okhttp","title":"Migrating from OkHttp + Gson","description":"Complete migration guide from OkHttp + Gson to MochaJSON. Learn how to convert your existing HTTP client code with step-by-step examples and best practices.","source":"@site/docs/migration/from-okhttp.md","sourceDirName":"migration","slug":"/migration/from-okhttp","permalink":"/MochaJSON/migration/from-okhttp","draft":false,"unlisted":false,"editUrl":"https://github.com/guptavishal-xm1/MochaJSON/tree/main/docs/docs/migration/from-okhttp.md","tags":[],"version":"current","frontMatter":{"title":"Migrating from OkHttp + Gson","description":"Complete migration guide from OkHttp + Gson to MochaJSON. Learn how to convert your existing HTTP client code with step-by-step examples and best practices.","keywords":["migrate from OkHttp","migrate from Gson","OkHttp to MochaJSON","Gson to MochaJSON","HTTP client migration"]},"sidebar":"tutorialSidebar","previous":{"title":"Exceptions","permalink":"/MochaJSON/api/exceptions"},"next":{"title":"Migration Guide","permalink":"/MochaJSON/migration-guide"}}');var s=t(4848),i=t(8453);const o={title:"Migrating from OkHttp + Gson",description:"Complete migration guide from OkHttp + Gson to MochaJSON. Learn how to convert your existing HTTP client code with step-by-step examples and best practices.",keywords:["migrate from OkHttp","migrate from Gson","OkHttp to MochaJSON","Gson to MochaJSON","HTTP client migration"]},l="Migrating from OkHttp + Gson to MochaJSON",c={},a=[{value:"Why Migrate?",id:"why-migrate",level:2},{value:"Before (OkHttp + Gson)",id:"before-okhttp--gson",level:3},{value:"After (MochaJSON)",id:"after-mochajson",level:3},{value:"Migration Steps",id:"migration-steps",level:2},{value:"Step 1: Update Dependencies",id:"step-1-update-dependencies",level:3},{value:"Step 2: Client Setup Migration",id:"step-2-client-setup-migration",level:3},{value:"Step 3: Basic GET Request Migration",id:"step-3-basic-get-request-migration",level:3},{value:"Step 4: POST Request Migration",id:"step-4-post-request-migration",level:3},{value:"Step 5: Async Request Migration",id:"step-5-async-request-migration",level:3},{value:"Step 6: Error Handling Migration",id:"step-6-error-handling-migration",level:3},{value:"Step 7: Interceptor Migration",id:"step-7-interceptor-migration",level:3},{value:"Step 8: File Upload Migration",id:"step-8-file-upload-migration",level:3},{value:"Complete Migration Example",id:"complete-migration-example",level:2},{value:"Before: Complete OkHttp + Gson Service",id:"before-complete-okhttp--gson-service",level:3},{value:"After: Complete MochaJSON Service",id:"after-complete-mochajson-service",level:3},{value:"Migration Benefits",id:"migration-benefits",level:2},{value:"Code Reduction",id:"code-reduction",level:3},{value:"New Features",id:"new-features",level:3},{value:"Performance Improvements",id:"performance-improvements",level:3},{value:"Migration Checklist",id:"migration-checklist",level:2},{value:"Next Steps",id:"next-steps",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"migrating-from-okhttp--gson-to-mochajson",children:"Migrating from OkHttp + Gson to MochaJSON"})}),"\n",(0,s.jsx)(n.p,{children:"This guide will help you migrate your existing OkHttp + Gson code to MochaJSON, reducing complexity while gaining new features like connection pooling, retry mechanisms, and circuit breakers."}),"\n",(0,s.jsx)(n.h2,{id:"why-migrate",children:"Why Migrate?"}),"\n",(0,s.jsx)(n.h3,{id:"before-okhttp--gson",children:"Before (OkHttp + Gson)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"2+ dependencies"})," to manage"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"20+ lines"})," of boilerplate per request"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Manual JSON parsing"})," with Gson"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Complex async setup"})," with callbacks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No built-in features"})," like retry or circuit breaker"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"after-mochajson",children:"After (MochaJSON)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"1 dependency"})," - everything included"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"1-3 lines"})," per request"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Automatic JSON parsing"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Built-in async support"})," with CompletableFuture"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Production features"})," like connection pooling, retry, circuit breaker"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"migration-steps",children:"Migration Steps"}),"\n",(0,s.jsx)(n.h3,{id:"step-1-update-dependencies",children:"Step 1: Update Dependencies"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Before (OkHttp + Gson):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gradle",children:"dependencies {\n    implementation 'com.squareup.okhttp3:okhttp:4.12.0'\n    implementation 'com.google.code.gson:gson:2.10.1'\n    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"After (MochaJSON):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gradle",children:"dependencies {\n    implementation 'io.github.guptavishal-xm1:MochaJSON:1.2.0'\n    \n    // Optional: For logging support\n    implementation 'org.slf4j:slf4j-api:2.0.9'\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-2-client-setup-migration",children:"Step 2: Client Setup Migration"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Before (OkHttp + Gson):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class ApiService {\n    private final OkHttpClient client;\n    private final Gson gson;\n    \n    public ApiService() {\n        this.client = new OkHttpClient.Builder()\n            .connectTimeout(30, TimeUnit.SECONDS)\n            .readTimeout(30, TimeUnit.SECONDS)\n            .writeTimeout(30, TimeUnit.SECONDS)\n            .retryOnConnectionFailure(true)\n            .connectionPool(new ConnectionPool(5, 5, TimeUnit.MINUTES))\n            .addInterceptor(new HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY))\n            .build();\n            \n        this.gson = new GsonBuilder()\n            .setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\")\n            .create();\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"After (MochaJSON):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class ApiService {\n    private final ApiClient client;\n    \n    public ApiService() {\n        this.client = new ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(30))\n            .readTimeout(Duration.ofSeconds(30))\n            .writeTimeout(Duration.ofSeconds(30))\n            .enableConnectionPooling()        // \ud83c\udd95 Better than OkHttp's connection pool\n            .enableRetryPolicy()              // \ud83c\udd95 Built-in retry mechanism\n            .enableLogging()                  // \ud83c\udd95 Built-in logging\n            .build();\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-3-basic-get-request-migration",children:"Step 3: Basic GET Request Migration"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Before (OkHttp + Gson):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public User getUser(String id) throws IOException {\n    Request request = new Request.Builder()\n        .url("https://api.example.com/users/" + id)\n        .addHeader("Authorization", "Bearer " + getToken())\n        .addHeader("Accept", "application/json")\n        .build();\n        \n    try (Response response = client.newCall(request).execute()) {\n        if (!response.isSuccessful()) {\n            throw new IOException("Unexpected code " + response);\n        }\n        \n        String json = response.body().string();\n        return gson.fromJson(json, User.class);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"After (MochaJSON):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public User getUser(String id) {\n    return client.get("https://api.example.com/users/" + id)\n        .header("Authorization", "Bearer " + getToken())\n        .execute()\n        .to(User.class);\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-4-post-request-migration",children:"Step 4: POST Request Migration"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Before (OkHttp + Gson):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public User createUser(User user) throws IOException {\n    String json = gson.toJson(user);\n    RequestBody body = RequestBody.create(json, MediaType.get("application/json"));\n    \n    Request request = new Request.Builder()\n        .url("https://api.example.com/users")\n        .post(body)\n        .addHeader("Authorization", "Bearer " + getToken())\n        .addHeader("Content-Type", "application/json")\n        .build();\n        \n    try (Response response = client.newCall(request).execute()) {\n        if (!response.isSuccessful()) {\n            throw new IOException("Unexpected code " + response);\n        }\n        \n        String responseJson = response.body().string();\n        return gson.fromJson(responseJson, User.class);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"After (MochaJSON):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public User createUser(User user) {\n    return client.post("https://api.example.com/users")\n        .header("Authorization", "Bearer " + getToken())\n        .body(user)  // Automatic JSON serialization\n        .execute()\n        .to(User.class);\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-5-async-request-migration",children:"Step 5: Async Request Migration"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Before (OkHttp + Gson):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public void getUserAsync(String id, Callback<User> callback) {\n    Request request = new Request.Builder()\n        .url("https://api.example.com/users/" + id)\n        .addHeader("Authorization", "Bearer " + getToken())\n        .build();\n        \n    client.newCall(request).enqueue(new Callback() {\n        @Override\n        public void onFailure(Call call, IOException e) {\n            callback.onError(e);\n        }\n        \n        @Override\n        public void onResponse(Call call, Response response) throws IOException {\n            try {\n                if (!response.isSuccessful()) {\n                    callback.onError(new IOException("Unexpected code " + response));\n                    return;\n                }\n                \n                String json = response.body().string();\n                User user = gson.fromJson(json, User.class);\n                callback.onSuccess(user);\n                \n            } catch (Exception e) {\n                callback.onError(e);\n            } finally {\n                response.close();\n            }\n        }\n    });\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"After (MochaJSON):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public CompletableFuture<User> getUserAsync(String id) {\n    return client.get("https://api.example.com/users/" + id)\n        .header("Authorization", "Bearer " + getToken())\n        .executeAsync()\n        .thenApply(response -> response.to(User.class));\n}\n\n// Or with callback-style (backward compatible)\npublic void getUserAsync(String id, Callback<User> callback) {\n    client.get("https://api.example.com/users/" + id)\n        .header("Authorization", "Bearer " + getToken())\n        .async(response -> {\n            try {\n                User user = response.to(User.class);\n                callback.onSuccess(user);\n            } catch (Exception e) {\n                callback.onError(e);\n            }\n        });\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-6-error-handling-migration",children:"Step 6: Error Handling Migration"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Before (OkHttp + Gson):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public User getUserWithErrorHandling(String id) {\n    try {\n        Request request = new Request.Builder()\n            .url("https://api.example.com/users/" + id)\n            .addHeader("Authorization", "Bearer " + getToken())\n            .build();\n            \n        try (Response response = client.newCall(request).execute()) {\n            if (!response.isSuccessful()) {\n                if (response.code() == 404) {\n                    throw new UserNotFoundException("User not found: " + id);\n                } else if (response.code() == 401) {\n                    throw new UnauthorizedException("Authentication required");\n                } else {\n                    throw new ApiException("API error: " + response.code());\n                }\n            }\n            \n            String json = response.body().string();\n            return gson.fromJson(json, User.class);\n            \n        }\n    } catch (IOException e) {\n        throw new ApiException("Network error", e);\n    } catch (JsonSyntaxException e) {\n        throw new ApiException("Invalid JSON response", e);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"After (MochaJSON):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public User getUserWithErrorHandling(String id) {\n    try {\n        return client.get("https://api.example.com/users/" + id)\n            .header("Authorization", "Bearer " + getToken())\n            .execute()\n            .to(User.class);\n            \n    } catch (ApiException e) {\n        switch (e.getStatusCode()) {\n            case 404:\n                throw new UserNotFoundException("User not found: " + id);\n            case 401:\n                throw new UnauthorizedException("Authentication required");\n            default:\n                throw new ApiException("API error: " + e.getStatusCode());\n        }\n    } catch (JsonException e) {\n        throw new ApiException("Invalid JSON response", e);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-7-interceptor-migration",children:"Step 7: Interceptor Migration"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Before (OkHttp + Gson):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public class AuthInterceptor implements Interceptor {\n    @Override\n    public Response intercept(Chain chain) throws IOException {\n        Request original = chain.request();\n        Request request = original.newBuilder()\n            .header("Authorization", "Bearer " + getToken())\n            .build();\n        return chain.proceed(request);\n    }\n}\n\npublic class LoggingInterceptor implements Interceptor {\n    @Override\n    public Response intercept(Chain chain) throws IOException {\n        Request request = chain.request();\n        long startTime = System.nanoTime();\n        \n        Response response = chain.proceed(request);\n        long endTime = System.nanoTime();\n        \n        logger.info("{} {} - {}ms", \n            request.method(), \n            request.url(), \n            (endTime - startTime) / 1_000_000);\n            \n        return response;\n    }\n}\n\n// Usage\nOkHttpClient client = new OkHttpClient.Builder()\n    .addInterceptor(new AuthInterceptor())\n    .addInterceptor(new LoggingInterceptor())\n    .build();\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"After (MochaJSON):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// Built-in authentication interceptor\nRequestInterceptor authInterceptor = RequestInterceptor.bearerAuth(() -> getToken());\n\n// Custom logging interceptor\nRequestInterceptor loggingInterceptor = request -> {\n    logger.info("Request: {} {}", request.getMethod(), request.getUrl());\n    return request;\n};\n\nResponseInterceptor responseLoggingInterceptor = response -> {\n    logger.info("Response: {} - {}ms", response.code(), response.getDuration().toMillis());\n    return response;\n};\n\n// Usage\nApiClient client = new ApiClient.Builder()\n    .addRequestInterceptor(authInterceptor)\n    .addRequestInterceptor(loggingInterceptor)\n    .addResponseInterceptor(responseLoggingInterceptor)\n    .build();\n'})}),"\n",(0,s.jsx)(n.h3,{id:"step-8-file-upload-migration",children:"Step 8: File Upload Migration"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Before (OkHttp + Gson):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public String uploadFile(File file) throws IOException {\n    RequestBody fileBody = RequestBody.create(file, MediaType.get("application/octet-stream"));\n    RequestBody requestBody = new MultipartBody.Builder()\n        .setType(MultipartBody.FORM)\n        .addFormDataPart("file", file.getName(), fileBody)\n        .addFormDataPart("description", "File upload")\n        .build();\n        \n    Request request = new Request.Builder()\n        .url("https://api.example.com/upload")\n        .post(requestBody)\n        .addHeader("Authorization", "Bearer " + getToken())\n        .build();\n        \n    try (Response response = client.newCall(request).execute()) {\n        if (!response.isSuccessful()) {\n            throw new IOException("Upload failed: " + response.code());\n        }\n        \n        String json = response.body().string();\n        JsonObject result = gson.fromJson(json, JsonObject.class);\n        return result.get("fileId").getAsString();\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"After (MochaJSON):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public String uploadFile(File file) {\n    ApiResponse response = client.post("https://api.example.com/upload")\n        .header("Authorization", "Bearer " + getToken())\n        .multipart()\n        .addFile("file", file)\n        .addField("description", "File upload")\n        .execute();\n        \n    return response.toMap().get("fileId").toString();\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"complete-migration-example",children:"Complete Migration Example"}),"\n",(0,s.jsx)(n.h3,{id:"before-complete-okhttp--gson-service",children:"Before: Complete OkHttp + Gson Service"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public class UserService {\n    private final OkHttpClient client;\n    private final Gson gson;\n    \n    public UserService() {\n        this.client = new OkHttpClient.Builder()\n            .connectTimeout(30, TimeUnit.SECONDS)\n            .readTimeout(30, TimeUnit.SECONDS)\n            .connectionPool(new ConnectionPool(5, 5, TimeUnit.MINUTES))\n            .addInterceptor(new HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY))\n            .build();\n            \n        this.gson = new GsonBuilder()\n            .setDateFormat("yyyy-MM-dd\'T\'HH:mm:ss.SSSZ")\n            .create();\n    }\n    \n    public User getUser(String id) throws IOException {\n        Request request = new Request.Builder()\n            .url("https://api.example.com/users/" + id)\n            .addHeader("Authorization", "Bearer " + getToken())\n            .build();\n            \n        try (Response response = client.newCall(request).execute()) {\n            if (!response.isSuccessful()) {\n                throw new IOException("Unexpected code " + response);\n            }\n            \n            String json = response.body().string();\n            return gson.fromJson(json, User.class);\n        }\n    }\n    \n    public List<User> getUsers() throws IOException {\n        Request request = new Request.Builder()\n            .url("https://api.example.com/users")\n            .addHeader("Authorization", "Bearer " + getToken())\n            .build();\n            \n        try (Response response = client.newCall(request).execute()) {\n            if (!response.isSuccessful()) {\n                throw new IOException("Unexpected code " + response);\n            }\n            \n            String json = response.body().string();\n            Type userListType = new TypeToken<List<User>>(){}.getType();\n            return gson.fromJson(json, userListType);\n        }\n    }\n    \n    public User createUser(User user) throws IOException {\n        String json = gson.toJson(user);\n        RequestBody body = RequestBody.create(json, MediaType.get("application/json"));\n        \n        Request request = new Request.Builder()\n            .url("https://api.example.com/users")\n            .post(body)\n            .addHeader("Authorization", "Bearer " + getToken())\n            .addHeader("Content-Type", "application/json")\n            .build();\n            \n        try (Response response = client.newCall(request).execute()) {\n            if (!response.isSuccessful()) {\n                throw new IOException("Unexpected code " + response);\n            }\n            \n            String responseJson = response.body().string();\n            return gson.fromJson(responseJson, User.class);\n        }\n    }\n    \n    private String getToken() {\n        // Token retrieval logic\n        return "your-token-here";\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"after-complete-mochajson-service",children:"After: Complete MochaJSON Service"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public class UserService {\n    private final ApiClient client;\n    \n    public UserService() {\n        this.client = new ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(30))\n            .readTimeout(Duration.ofSeconds(30))\n            .enableConnectionPooling()        // \ud83c\udd95 Better connection management\n            .enableRetryPolicy()              // \ud83c\udd95 Automatic retries\n            .enableCircuitBreaker()           // \ud83c\udd95 Fault tolerance\n            .enableCaching()                  // \ud83c\udd95 HTTP caching\n            .addRequestInterceptor(RequestInterceptor.bearerAuth(() -> getToken()))\n            .enableLogging()                  // \ud83c\udd95 Built-in logging\n            .build();\n    }\n    \n    public User getUser(String id) {\n        return client.get("https://api.example.com/users/" + id)\n            .execute()\n            .to(User.class);\n    }\n    \n    public List<User> getUsers() {\n        return client.get("https://api.example.com/users")\n            .execute()\n            .toList();\n    }\n    \n    public User createUser(User user) {\n        return client.post("https://api.example.com/users")\n            .body(user)  // Automatic JSON serialization\n            .execute()\n            .to(User.class);\n    }\n    \n    private String getToken() {\n        // Token retrieval logic\n        return "your-token-here";\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"migration-benefits",children:"Migration Benefits"}),"\n",(0,s.jsx)(n.h3,{id:"code-reduction",children:"Code Reduction"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"90% less code"})," - From 20+ lines to 1-3 lines per request"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No more Gson setup"})," - Automatic JSON parsing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No more manual error handling"})," - Built-in exception mapping"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No more complex async setup"})," - Built-in CompletableFuture support"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"new-features",children:"New Features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Connection pooling"})," - Better performance than OkHttp's connection pool"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Retry mechanism"})," - Automatic retries with exponential backoff"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Circuit breaker"})," - Fault tolerance for downstream services"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"HTTP caching"})," - LRU cache with TTL support"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Virtual threads"})," - Java 21+ support for massive concurrency"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"File operations"})," - Simple multipart upload/download"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"performance-improvements",children:"Performance Improvements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"73% faster requests"})," with connection pooling"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"99.8% faster"})," for cached requests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"90% faster"})," with async operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"10x more concurrent requests"})," with virtual threads"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"migration-checklist",children:"Migration Checklist"}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Update dependencies"})," - Replace OkHttp + Gson with MochaJSON"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Migrate client setup"})," - Replace OkHttpClient with ApiClient"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Convert GET requests"})," - Simplify request building"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Convert POST requests"})," - Use automatic JSON serialization"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Migrate async calls"})," - Use CompletableFuture or callbacks"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Update error handling"})," - Use MochaJSON exceptions"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Migrate interceptors"})," - Convert to MochaJSON interceptors"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Test thoroughly"})," - Ensure all functionality works"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Enable new features"})," - Add connection pooling, retry, circuit breaker"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"Update documentation"})," - Reflect new API usage"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/MochaJSON/getting-started",children:"Getting Started"})})," - Learn MochaJSON basics"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/MochaJSON/best-practices/production-checklist",children:"Best Practices"})})," - Production deployment guide"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/MochaJSON/best-practices/performance-tips",children:"Performance Tips"})})," - Optimize your HTTP client"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/MochaJSON/advanced/interceptors",children:"Advanced Features"})})," - Learn about advanced features"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);